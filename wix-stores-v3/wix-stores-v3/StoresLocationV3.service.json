{
  "name": "StoresLocationV3",
  "memberOf": "wix-stores-v3",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-stores.v3-stores_location",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "createStoresLocation",
      "params": [
        {
          "name": "storesLocation",
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
            }
          ],
          "doc": "StoresLocation to be created.",
          "required": true
        }
      ],
      "requiredFields": [
        "storesLocation",
        "storesLocation.locationName"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
                }
              ]
            }
          }
        ],
        "doc": "The created StoresLocation.\n"
      },
      "docs": {
        "summary": "Creates a StoresLocation.",
        "description": [
          "The request body must include os_location_id of a corresponding site location:\nhttps://bo.wix.com/wix-docs/rest/business-tools/locations/introduction"
        ],
        "examples": [
          {
            "title": "createStoresLocation example for dashboard page code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "",
              "async function createStoresLocation(storesLocation) {",
              "  try {",
              "    const result = await storesLocationV3.createStoresLocation(storesLocation);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "createStoresLocation example for exporting from backend code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedCreateStoresLocation = elevate(storesLocationV3.createStoresLocation);",
              "",
              "export const createStoresLocation = webMethod(",
              "  Permissions.Anyone,",
              "  async (storesLocation) => {",
              "    try {",
              "      const result = await elevatedCreateStoresLocation(storesLocation);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "createStoresLocation",
      "isAdminMethod": true
    },
    {
      "name": "deleteStoresLocation",
      "params": [
        {
          "name": "storesLocationId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Id of the StoresLocation to delete.",
          "required": true
        }
      ],
      "requiredFields": [
        "storesLocationId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Deletes a StoresLocation.",
        "description": [
          "Deleting a StoresLocation permanently removes them from the StoresLocation List."
        ],
        "examples": [
          {
            "title": "deleteStoresLocation example for dashboard page code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "",
              "async function deleteStoresLocation(storesLocationId) {",
              "  try {",
              "    const result = await storesLocationV3.deleteStoresLocation(storesLocationId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "deleteStoresLocation example for exporting from backend code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedDeleteStoresLocation = elevate(storesLocationV3.deleteStoresLocation);",
              "",
              "export const deleteStoresLocation = webMethod(",
              "  Permissions.Anyone,",
              "  async (storesLocationId) => {",
              "    try {",
              "      const result = await elevatedDeleteStoresLocation(storesLocationId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "deleteStoresLocation",
      "isAdminMethod": true
    },
    {
      "name": "getDefaultStoresLocation",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-stores-v3.StoresLocationV3.GetDefaultStoresLocationResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Retrieves the default inventory location.",
        "description": [],
        "examples": [
          {
            "title": "getDefaultStoresLocation example",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "",
              "async function getDefaultStoresLocation() {",
              "  try {",
              "    const result = await storesLocationV3.getDefaultStoresLocation();",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "getDefaultStoresLocation example for exporting from backend code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "",
              "export const getDefaultStoresLocation = webMethod(",
              "  Permissions.Anyone,",
              "  async () => {",
              "    try {",
              "      const result = await storesLocationV3.getDefaultStoresLocation();",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getDefaultStoresLocation"
    },
    {
      "name": "getOrCreateDefaultStoresLocation",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-stores-v3.StoresLocationV3.GetOrCreateDefaultStoresLocationResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Retrieves the default inventory location, or creates it if it doesn't exist.",
        "description": [],
        "examples": [
          {
            "title": "getOrCreateDefaultStoresLocation example for dashboard page code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "",
              "async function getOrCreateDefaultStoresLocation() {",
              "  try {",
              "    const result = await storesLocationV3.getOrCreateDefaultStoresLocation();",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "getOrCreateDefaultStoresLocation example for exporting from backend code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedGetOrCreateDefaultStoresLocation = elevate(storesLocationV3.getOrCreateDefaultStoresLocation);",
              "",
              "export const getOrCreateDefaultStoresLocation = webMethod(",
              "  Permissions.Anyone,",
              "  async () => {",
              "    try {",
              "      const result = await elevatedGetOrCreateDefaultStoresLocation();",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getOrCreateDefaultStoresLocation",
      "isAdminMethod": true
    },
    {
      "name": "getStoresLocation",
      "params": [
        {
          "name": "storesLocationId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the StoresLocation to retrieve.",
          "required": true
        }
      ],
      "requiredFields": [
        "storesLocationId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
                }
              ]
            }
          }
        ],
        "doc": "The requested StoresLocation.\n"
      },
      "docs": {
        "summary": "Retrieves a StoresLocation.",
        "description": [],
        "examples": [
          {
            "title": "getStoresLocation example",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "",
              "async function getStoresLocation(storesLocationId) {",
              "  try {",
              "    const result = await storesLocationV3.getStoresLocation(storesLocationId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "getStoresLocation example for exporting from backend code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "",
              "export const getStoresLocation = webMethod(",
              "  Permissions.Anyone,",
              "  async (storesLocationId) => {",
              "    try {",
              "      const result = await storesLocationV3.getStoresLocation(storesLocationId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getStoresLocation"
    },
    {
      "name": "queryStoresLocations",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocationsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Retrieves a list of StoresLocations, given the provided [paging, filtering, and sorting][1].",
        "description": [
          "",
          "Up to 1,000 StoresLocations can be returned per request.",
          "",
          "To learn how to query StoresLocations, see [API Query Language][2].",
          "",
          "[1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging",
          "[2]: https://dev.wix.com/api/rest/getting-started/api-query-language",
          "",
          "",
          "Notice, not all sits locations will be fetched, only the ones that are assigned as inventory locations",
          "",
          "",
          "|PROPERTY\t|SUPPORTED FILTERS & SORTING\t",
          "|:---:|:---:|",
          "|`_id`|[`eq()`](wix-stores-v3.StoresLocationV3.StoresLocationsQueryBuilder#eq),[`ne()`](wix-stores-v3.StoresLocationV3.StoresLocationsQueryBuilder#ne),[`exists()`](wix-stores-v3.StoresLocationV3.StoresLocationsQueryBuilder#exists),[`in()`](wix-stores-v3.StoresLocationV3.StoresLocationsQueryBuilder#in),[`hasSome()`](wix-stores-v3.StoresLocationV3.StoresLocationsQueryBuilder#hasSome),[`startsWith()`](wix-stores-v3.StoresLocationV3.StoresLocationsQueryBuilder#startsWith)|"
        ],
        "examples": [
          {
            "title": "queryStoresLocations example",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "",
              "async function queryStoresLocations() {",
              "  const { items } = storesLocationV3.queryStoresLocations().find();",
              "}",
              ""
            ]
          },
          {
            "title": "queryStoresLocations example for exporting from backend code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "",
              "export const queryStoresLocations = webMethod(",
              "  Permissions.Anyone,",
              "  async (options) => {",
              "    try {",
              "      const result = await storesLocationV3.queryStoresLocations(options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "queryStoresLocations"
    },
    {
      "name": "updateStoresLocation",
      "params": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "StoresLocation ID.",
          "required": true
        },
        {
          "name": "storesLocation",
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.UpdateStoresLocation"
            }
          ],
          "doc": "",
          "required": true
        }
      ],
      "requiredFields": [
        "_id",
        "storesLocation",
        "storesLocation.revision"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
                }
              ]
            }
          }
        ],
        "doc": "Updated StoresLocation.\n"
      },
      "docs": {
        "summary": "Updates a StoresLocation.\nEach time the StoresLocation is updated,\n`revision` increments by 1.\nThe current `revision` must be passed when updating the StoresLocation.\nThis ensures you're working with the latest StoresLocation\nand prevents unintended overwrites.",
        "description": [],
        "examples": [
          {
            "title": "updateStoresLocation example for dashboard page code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "",
              "async function updateStoresLocation(id, storesLocation, options) {",
              "  try {",
              "    const result = await storesLocationV3.updateStoresLocation(id, storesLocation, options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "updateStoresLocation example for exporting from backend code",
            "body": [
              "import { storesLocationV3 } from 'wix-stores.v3';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedUpdateStoresLocation = elevate(storesLocationV3.updateStoresLocation);",
              "",
              "export const updateStoresLocation = webMethod(",
              "  Permissions.Anyone,",
              "  async (id, storesLocation, options) => {",
              "    try {",
              "      const result = await elevatedUpdateStoresLocation(id, storesLocation, options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "updateStoresLocation",
      "isAdminMethod": true
    }
  ],
  "messages": [
    {
      "name": "ActionEvent",
      "members": [
        {
          "name": "bodyAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "App",
      "members": [
        {
          "name": "appDefId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The AppDefId"
        },
        {
          "name": "instanceId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The instance Id"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateStoresLocationRequest",
      "members": [
        {
          "name": "storesLocation",
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
            }
          ],
          "doc": "StoresLocation to be created."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateStoresLocationResponse",
      "members": [
        {
          "name": "storesLocation",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
            }
          ],
          "doc": "The created StoresLocation."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorPaging",
      "members": [
        {
          "name": "cursor",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Pointer to the next or previous page in the list of results.\n\nYou can get the relevant cursor token\nfrom the `pagingMetadata` object in the previous call's response.\nNot relevant for the first request.\n"
        },
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to load."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorPagingMetadata",
      "members": [
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items returned in the response."
        },
        {
          "name": "cursors",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.Cursors"
            }
          ],
          "doc": "Offset that was requested."
        },
        {
          "name": "hasNext",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Indicates if there are more results after the current page.\nIf `true`, another page of results can be retrieved.\nIf `false`, this is the last page."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorQuery",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.CursorPaging"
            }
          ],
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`."
        },
        {
          "name": "filter",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Filter object in the following format:\n`\"filter\" : {\n\"fieldName1\": \"value1\",\n\"fieldName2\":{\"$operator\":\"value2\"}\n}`\nExample of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`"
        },
        {
          "name": "sort",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-stores-v3.StoresLocationV3.Sorting"
                  }
                ]
              }
            }
          ],
          "doc": "Sort object in the following format:\n`[{\"fieldName\":\"sortField1\",\"order\":\"ASC\"},{\"fieldName\":\"sortField2\",\"order\":\"DESC\"}]`"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfCursorQueryPagingMethodOneOf",
            "members": [
              "cursorPaging"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorQueryPagingMethodOneOf",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.CursorPaging"
            }
          ],
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Cursors",
      "members": [
        {
          "name": "next",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor pointing to next page in the list of results."
        },
        {
          "name": "prev",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor pointing to previous page in the list of results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteStoresLocationRequest",
      "members": [
        {
          "name": "storesLocationId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Id of the StoresLocation to delete."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteStoresLocationResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEvent",
      "members": [
        {
          "name": "_id",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Unique event ID.\nAllows clients to ignore duplicate webhooks."
        },
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "entityEventSequence",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A sequence number defining the order of updates to the underlying entity.\nFor example, given that some entity was updated at 16:00 and than again at 16:01,\nit is guaranteed that the sequence number of the second update is strictly higher than the first.\nAs the consumer, you can use this value to ensure that you handle messages in the correct order.\nTo do so, you will need to persist this number on your end, and compare the sequence number from the\nmessage against the one you have stored. Given that the stored number is higher, you should ignore the message."
        },
        {
          "name": "entityFqdn",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Assumes actions are also always typed to an entity_type\nExample: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction"
        },
        {
          "name": "entityId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the entity associated with the event."
        },
        {
          "name": "eventTime",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event timestamp."
        },
        {
          "name": "originatedFrom",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "If present, indicates the action that triggered the event."
        },
        {
          "name": "slug",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\nThis is although the created/updated/deleted notion is duplication of the oneof types\nExample: created/updated/deleted/started/completed/email_opened"
        },
        {
          "name": "triggeredByAnonymizeRequest",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the event was triggered as a result of a privacy regulation application\n(for example, GDPR)."
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfDomainEventBodyOneOf",
            "members": [
              "actionEvent",
              "createdEvent",
              "deletedEvent",
              "updatedEvent"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEventBodyOneOf",
      "members": [
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Empty",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityCreatedEvent",
      "members": [
        {
          "name": "entityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityDeletedEvent",
      "members": [
        {
          "name": "deletedEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Entity that was deleted"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityUpdatedEvent",
      "members": [
        {
          "name": "currentEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\nThis means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\nWe don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetDefaultStoresLocationRequest",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetDefaultStoresLocationResponse",
      "members": [
        {
          "name": "storesLocation",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
            }
          ],
          "doc": "The default StoresLocations."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetOrCreateDefaultStoresLocationRequest",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetOrCreateDefaultStoresLocationResponse",
      "members": [
        {
          "name": "storesLocation",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
            }
          ],
          "doc": "The default StoresLocations."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetStoresLocationRequest",
      "members": [
        {
          "name": "storesLocationId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the StoresLocation to retrieve."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetStoresLocationResponse",
      "members": [
        {
          "name": "storesLocation",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
            }
          ],
          "doc": "The requested StoresLocation."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "IdentificationData",
      "members": [
        {
          "name": "anonymousVisitorId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a site visitor that has not logged in to the site."
        },
        {
          "name": "appId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of an app."
        },
        {
          "name": "identityType",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Supported values:\n- `'ANONYMOUS_VISITOR'`\n- `'APP'`\n- `'MEMBER'`\n- `'UNKNOWN'`\n- `'WIX_USER'`"
        },
        {
          "name": "memberId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a site visitor that has logged in to the site."
        },
        {
          "name": "wixUserId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a Wix user (site owner, contributor, etc.)."
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfIdentificationDataIdOneOf",
            "members": [
              "anonymousVisitorId",
              "appId",
              "memberId",
              "wixUserId"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "IdentificationDataIdOneOf",
      "members": [
        {
          "name": "anonymousVisitorId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a site visitor that has not logged in to the site."
        },
        {
          "name": "appId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of an app."
        },
        {
          "name": "memberId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a site visitor that has logged in to the site."
        },
        {
          "name": "wixUserId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a Wix user (site owner, contributor, etc.)."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "InvalidateCache",
      "members": [
        {
          "name": "app",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.App"
            }
          ],
          "doc": "Invalidate by App"
        },
        {
          "name": "localDc",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Is local DS"
        },
        {
          "name": "metaSiteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!"
        },
        {
          "name": "page",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.Page"
            }
          ],
          "doc": "Invalidate by page id"
        },
        {
          "name": "reason",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "tell us why you're invalidating the cache. You don't need to add your app name"
        },
        {
          "name": "siteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!"
        },
        {
          "name": "uri",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.URI"
            }
          ],
          "doc": "Invalidate by URI path"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfInvalidateCacheGetByOneOf",
            "members": [
              "app",
              "metaSiteId",
              "page",
              "siteId",
              "uri"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "InvalidateCacheGetByOneOf",
      "members": [
        {
          "name": "app",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.App"
            }
          ],
          "doc": "Invalidate by App"
        },
        {
          "name": "metaSiteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!"
        },
        {
          "name": "page",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.Page"
            }
          ],
          "doc": "Invalidate by page id"
        },
        {
          "name": "siteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!"
        },
        {
          "name": "uri",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.URI"
            }
          ],
          "doc": "Invalidate by URI path"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MessageEnvelope",
      "members": [
        {
          "name": "data",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Stringify payload."
        },
        {
          "name": "eventType",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event type."
        },
        {
          "name": "identity",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.IdentificationData"
            }
          ],
          "doc": "The identification type and identity data."
        },
        {
          "name": "instanceId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "App instance ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Page",
      "members": [
        {
          "name": "metaSiteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "the msid the page is on"
        },
        {
          "name": "pageId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by Page ID"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryStoresLocationsRequest",
      "members": [
        {
          "name": "query",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.CursorQuery"
            }
          ],
          "doc": "WQL expression."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryStoresLocationsResponse",
      "members": [
        {
          "name": "pagingMetadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.CursorPagingMetadata"
            }
          ],
          "doc": "Paging metadata"
        },
        {
          "name": "storesLocations",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
                  }
                ]
              }
            }
          ],
          "doc": "List of StoresLocations."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Sorting",
      "members": [
        {
          "name": "fieldName",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Name of the field to sort by."
        },
        {
          "name": "order",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "StoresLocation",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date and time the StoresLocation was created."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "StoresLocation ID."
        },
        {
          "name": "_updatedDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date and time the StoresLocation was last updated."
        },
        {
          "name": "defaultLocation",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the InventoryLocation is the default location."
        },
        {
          "name": "locationName",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Materialized display name of the location."
        },
        {
          "name": "locationType",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Indicates if the location is a physical site or virtual online store"
        },
        {
          "name": "osLocationId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "location_id from OS location service."
        },
        {
          "name": "revision",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Revision number, which increments by 1 each time the StoresLocation is updated.\nTo prevent conflicting changes,\nthe current revision must be passed when updating the StoresLocation.\n\nIgnored when creating a StoresLocation."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "URI",
      "members": [
        {
          "name": "metaSiteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "the msid the URI is on"
        },
        {
          "name": "uriPath",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateStoresLocation",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date and time the StoresLocation was created."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "StoresLocation ID."
        },
        {
          "name": "_updatedDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date and time the StoresLocation was last updated."
        },
        {
          "name": "defaultLocation",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the InventoryLocation is the default location."
        },
        {
          "name": "locationName",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Materialized display name of the location."
        },
        {
          "name": "locationType",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Indicates if the location is a physical site or virtual online store"
        },
        {
          "name": "osLocationId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "location_id from OS location service."
        },
        {
          "name": "revision",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Revision number, which increments by 1 each time the StoresLocation is updated.\nTo prevent conflicting changes,\nthe current revision must be passed when updating the StoresLocation.\n\nIgnored when creating a StoresLocation."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateStoresLocationOptions",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateStoresLocationRequest",
      "members": [
        {
          "name": "storesLocation",
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
            }
          ],
          "doc": "StoresLocation to be updated, may be partial."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateStoresLocationResponse",
      "members": [
        {
          "name": "storesLocation",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-stores-v3.StoresLocationV3.StoresLocation"
            }
          ],
          "doc": "Updated StoresLocation."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    }
  ]
}
