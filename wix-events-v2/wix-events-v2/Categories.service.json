{
  "name": "Categories",
  "memberOf": "wix-events-v2",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-events.v2-category",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "assignEvents",
      "params": [
        {
          "name": "categoryId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of category to which events should be assigned.",
          "required": true
        },
        {
          "name": "eventId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of events IDs.",
          "required": true
        }
      ],
      "requiredFields": [
        "categoryId",
        "eventId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Assigns events to a single category.",
        "description": [],
        "examples": [
          {
            "title": "Assign events to a category (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedAssignEvents = elevate(categories.assignEvents);   ",
              "",
              "/* ",
              " * Sample categoryId value: \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " * Sample eventId value: [\"4e5e4adb-9778-4171-a9bb-44e27834ac89\"]",
              " */",
              "",
              "export const myAssignEventsFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categoryId, eventId) => {",
              "    try {",
              "      const assignedEvents = await elevatedAssignEvents(categoryId, eventId);",
              "      console.log('Events are assigned to the category.');",
              "      return assignedEvents;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to void */"
            ]
          },
          {
            "title": "Assign events to a category (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/* ",
              " * Sample value of categoryId: \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " * Sample value of eventId: [\"4e5e4adb-9778-4171-a9bb-44e27834ac89\"]",
              " */",
              "",
              "export async function myAssignEventsFunction(categoryId, eventId) {",
              "  try {",
              "    const assignedEvents = await categories.assignEvents(categoryId, eventId);",
              "    console.log('Events are assigned to the category');",
              "    return assignedEvents;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to void */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "assignEvents",
      "isAdminMethod": true
    },
    {
      "name": "bulkAssignEvents",
      "params": [
        {
          "name": "categoryId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of category IDs to which events should be assigned.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.BulkAssignEventsOptions"
            }
          ],
          "doc": "Options to use when assigning events to multiple categories.",
          "required": true
        }
      ],
      "requiredFields": [
        "categoryId",
        "options",
        "options.eventId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Categories.BulkAssignEventsResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Assigns events to multiple categories.",
        "description": [],
        "examples": [
          {
            "title": "Bulk assign events to multiple categories (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedBulkAssignEvents = elevate(categories.bulkAssignEvents);",
              "",
              "/* ",
              " * Sample categoryId value: [\"89d3e8d4-45bc-4439-9e74-7e21b3418c88\", \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"]",
              " * Sample options value: ",
              " * {",
              " *  \"eventId\": [\"4e5e4adb-9778-4171-a9bb-44e27834ac89\"]",
              " * }",
              " */",
              "",
              "export const myBulkAssignEventsFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categoryId, options) => {",
              "    try {",
              "      const assignedEvents = await elevatedBulkAssignEvents(categoryId, options);",
              "      console.log('Bulk assign results:', assignedEvents);",
              "      return assignedEvents;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to:",
              " * {",
              " *  \"results\": [",
              " *   {",
              " *     \"itemMetadata\": {",
              " *       \"originalIndex\": 0,",
              " *       \"success\": true,",
              " *       \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " *     },",
              " *     \"item\": {",
              " *       \"name\": \"workshop\",",
              " *       \"states\": [",
              " *         \"MANUAL\"",
              " *       ],",
              " *       \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " *       \"_createdDate\": \"2022-12-13T11:03:19.174Z\"",
              " *     }",
              " *   },",
              " *   {",
              " *     \"itemMetadata\": {",
              " *      \"originalIndex\": 1,",
              " *       \"success\": true,",
              " *       \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\"",
              " *     },",
              " *     \"item\": {",
              " *       \"name\": \"technology\",",
              " *       \"states\": [",
              " *         \"MANUAL\"",
              " *       ],",
              " *       \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\",",
              " *       \"_createdDate\": \"2023-07-12T11:07:35.776Z\"",
              " *     }",
              " *   }",
              " * ],",
              " * \"bulkActionMetadata\": {",
              " *   \"totalSuccesses\": 2,",
              " *   \"totalFailures\": 0,",
              " *   \"undetailedFailures\": 0",
              " * }",
              " * }",
              " */"
            ]
          },
          {
            "title": "Bulks assign events to multiple categories (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/* ",
              " * Sample categoryId value: [\"89d3e8d4-45bc-4439-9e74-7e21b3418c88\", \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"]",
              " * Sample options value: ",
              " * {",
              " *  \"eventId\": [\"4e5e4adb-9778-4171-a9bb-44e27834ac89\"]",
              " * }",
              " */",
              "",
              "export async function myBulkAssignEventsFunction(categoryId, options) {",
              "  try {",
              "    const assignedEvents = await categories.bulkAssignEvents(categoryId, options);",
              "    console.log('Bulk assign results: ', assignedEvents);",
              "    return assignedEvents;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"results\": [",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 0,",
              " *         \"success\": true,",
              " *         \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"workshop\",",
              " *         \"states\": [",
              " *           \"MANUAL\"",
              " *         ],",
              " *         \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " *         \"_createdDate\": \"2022-12-13T11:03:19.174Z\"",
              " *       }",
              " *     },",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 1,",
              " *         \"success\": true,",
              " *         \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"technology\",",
              " *         \"states\": [",
              " *           \"MANUAL\"",
              " *         ],",
              " *         \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\",",
              " *         \"_createdDate\": \"2023-07-12T11:07:35.776Z\"",
              " *       }",
              " *     }",
              " *   ],",
              " *   \"bulkActionMetadata\": {",
              " *     \"totalSuccesses\": 2,",
              " *     \"totalFailures\": 0,",
              " *     \"undetailedFailures\": 0",
              " *   }",
              " * }",
              " */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "bulkAssignEvents",
      "isAdminMethod": true
    },
    {
      "name": "bulkAssignEventsAsync",
      "params": [
        {
          "name": "categoryId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Category IDs.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.BulkAssignEventsAsyncOptions"
            }
          ],
          "doc": "Options to use when assigning events to multiple categories.",
          "required": true
        }
      ],
      "requiredFields": [
        "categoryId",
        "options",
        "options.filter"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Assigns events that match a given filter criteria to multiple categories. With this function, the events will be assigned to the category not instantly (like in `[bulkAssignEvents](https://www.wix.com/velo/reference/wix-events-v2/categories/bulkassignevents)`, but only after some time.",
        "description": [],
        "examples": [
          {
            "title": "Bulk assign filtered events to multiple categories (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedBulkAssignEventsAsync = elevate(categories.bulkAssignEventsAsync);",
              "",
              "/* ",
              " * Sample categoryId value: [\"89d3e8d4-45bc-4439-9e74-7e21b3418c88\", \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"]",
              " * Sample options value:",
              " * {",
              " *  \"filter\": {",
              " *     \"_id\": \"4e5e4adb-9778-4171-a9bb-44e27834ac89\"",
              " *  }",
              " * }",
              " */",
              "",
              "export const myBulkAssignEventsAsyncFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categoryId, options) => {",
              "    try {",
              "      const assignedEvents = await elevatedBulkAssignEventsAsync(categoryId, options);",
              "      console.log('Events are assigned to categories');",
              "      return assignedEvents;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to void */"
            ]
          },
          {
            "title": "Bulk assign filtered events to multiple categories (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/* ",
              " * Sample categoryId value: [\"89d3e8d4-45bc-4439-9e74-7e21b3418c88\", \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"]",
              " * Sample options value:",
              " * {",
              " *  \"filter\": {",
              " *     \"_id\": \"4e5e4adb-9778-4171-a9bb-44e27834ac89\"",
              " *  }",
              " * }",
              " */",
              "",
              "export async function myBulkAssignEventsAsyncFunction(categoryId, options) {",
              "  try {",
              "    const assignedEvents = await categories.bulkAssignEventsAsync(categoryId, options);",
              "    console.log('Events are assigned to the categories');",
              "    return assignedEvents;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to void */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "bulkAssignEventsAsync",
      "isAdminMethod": true
    },
    {
      "name": "bulkCreateCategory",
      "params": [
        {
          "name": "categories",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Categories.Category"
                  }
                ]
              }
            }
          ],
          "doc": "Categories to create.",
          "required": true
        }
      ],
      "requiredFields": [
        "categories"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Categories.BulkCreateCategoryResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Creates new categories.",
        "description": [],
        "examples": [
          {
            "title": "Create multiple categories (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedBulkCreateCategory = elevate(categories.bulkCreateCategory);",
              "",
              "/*",
              " * Sample categories value:",
              " * [",
              " *  {",
              " *    \"name\": \"leather\",",
              " *    \"states\": [\"MANUAL\"]",
              " *  },",
              " *  {",
              " *    \"name\": \"shoes\",",
              " *    \"states\": [\"HIDDEN\"]",
              " *  }",
              " * ]",
              " */",
              "",
              "export const myBulkCreateCategoryFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categories) => {",
              "    try {",
              "      const createdCategories = await elevatedBulkCreateCategory(categories);",
              "      console.log('Created categories: ', createdCategories);",
              "      return createdCategories;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"results\": [",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 0,",
              " *         \"success\": true,",
              " *         \"_id\": \"7d2560a8-b0ab-41fe-9c7c-6584157b2de1\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"leather\",",
              " *         \"states\": [",
              " *           \"MANUAL\"",
              " *         ],",
              " *         \"_id\": \"7d2560a8-b0ab-41fe-9c7c-6584157b2de1\",",
              " *         \"_createdDate\": \"2024-04-23T07:27:41.048Z\"",
              " *       }",
              " *     },",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 1,",
              " *         \"success\": true,",
              " *         \"_id\": \"022cdce2-6d8d-4dfd-9210-4b6671539173\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"shoes\",",
              " *         \"states\": [",
              " *           \"HIDDEN\"",
              " *         ],",
              " *         \"_id\": \"022cdce2-6d8d-4dfd-9210-4b6671539173\",",
              " *         \"_createdDate\": \"2024-04-23T07:27:41.048Z\"",
              " *       }",
              " *     }",
              " *   ],",
              " *   \"bulkActionMetadata\": {",
              " *     \"totalSuccesses\": 2,",
              " *     \"totalFailures\": 0,",
              " *     \"undetailedFailures\": 0",
              " *   }",
              " * }",
              " */"
            ]
          },
          {
            "title": "Create multiple categories (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/*",
              " * Sample categories value:",
              " * [",
              " *  {",
              " *    \"name\": \"leather\",",
              " *    \"states\": [\"MANUAL\"]",
              " *  },",
              " *  {",
              " *    \"name\": \"shoes\",",
              " *    \"states\": [\"MANUAL\"]",
              " *  }",
              " * ]",
              " */",
              "",
              "export async function myBulkCreateCategoryFunction(categories) {",
              "  try {",
              "    const createdCategories = await categories.bulkCreateCategory(categories);",
              "    console.log('Created categories: ', createdCategories);",
              "    return createdCategories;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"results\": [",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 0,",
              " *         \"success\": true,",
              " *         \"_id\": \"7d2560a8-b0ab-41fe-9c7c-6584157b2de1\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"leather\",",
              " *         \"states\": [",
              " *           \"MANUAL\"",
              " *         ],",
              " *         \"_id\": \"7d2560a8-b0ab-41fe-9c7c-6584157b2de1\",",
              " *         \"_createdDate\": \"2024-04-23T07:27:41.048Z\"",
              " *       }",
              " *     },",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 1,",
              " *         \"success\": true,",
              " *         \"_id\": \"022cdce2-6d8d-4dfd-9210-4b6671539173\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"shoes\",",
              " *         \"states\": [",
              " *           \"HIDDEN\"",
              " *         ],",
              " *         \"_id\": \"022cdce2-6d8d-4dfd-9210-4b6671539173\",",
              " *         \"_createdDate\": \"2024-04-23T07:27:41.048Z\"",
              " *       }",
              " *     }",
              " *   ],",
              " *   \"bulkActionMetadata\": {",
              " *     \"totalSuccesses\": 2,",
              " *     \"totalFailures\": 0,",
              " *     \"undetailedFailures\": 0",
              " *   }",
              " * }",
              " */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "bulkCreateCategory",
      "isAdminMethod": true
    },
    {
      "name": "bulkUnassignEvents",
      "params": [
        {
          "name": "categoryId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of category IDs.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.BulkUnassignEventsOptions"
            }
          ],
          "doc": "Options to use when removing events from multiple categories.",
          "required": false
        }
      ],
      "requiredFields": [
        "categoryId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Categories.BulkUnassignEventsResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Unassigns events from multiple categories.",
        "description": [],
        "examples": [
          {
            "title": "Remove events from multiple categories (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedBulkUnassignEvents = elevate(categories.bulkUnassignEvents);",
              "",
              "/* ",
              " * Sample categoryId value: [\"89d3e8d4-45bc-4439-9e74-7e21b3418c88\", \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"]",
              " * Sample options value:",
              " * {",
              " *   \"eventId\": [\"4e5e4adb-9778-4171-a9bb-44e27834ac89\"]",
              " * }",
              " */",
              "",
              "export const myBulkUnassignEventsFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categoryId, options) => {",
              "    try {",
              "      const unassignedEvents = await elevatedBulkUnassignEvents(categoryId, options);",
              "      console.log('Bulk unassign results: ', unassignedEvents);",
              "      return unassignedEvents;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"results\": [",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 0,",
              " *         \"success\": true,",
              " *         \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"workshop\",",
              " *         \"states\": [",
              " *           \"MANUAL\"",
              " *         ],",
              " *         \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " *         \"_createdDate\": \"2022-12-13T11:03:19.174Z\"",
              " *       }",
              " *     },",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 1,",
              " *         \"success\": true,",
              " *         \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"technology\",",
              " *         \"states\": [",
              " *           \"MANUAL\"",
              " *         ],",
              " *         \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\",",
              " *         \"_createdDate\": \"2023-07-12T11:07:35.776Z\"",
              " *       }",
              " *     }",
              " *   ],",
              " *   \"bulkActionMetadata\": {",
              " *     \"totalSuccesses\": 2,",
              " *     \"totalFailures\": 0,",
              " *     \"undetailedFailures\": 0",
              " *   }",
              " *  }",
              " */"
            ]
          },
          {
            "title": "Remove events from multiple categories (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/* ",
              " * Sample categoryId value: [\"89d3e8d4-45bc-4439-9e74-7e21b3418c88\", \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"]",
              " * Sample options value:",
              " * {",
              " *   \"eventId\": [\"4e5e4adb-9778-4171-a9bb-44e27834ac89\"]",
              " * }",
              " */",
              "",
              "export async function myBulkUnassignEventsFunction(categoryId, options) {",
              "  try {",
              "    const unassignedEvents = await categories.bulkUnassignEvents(categoryId, options);",
              "    console.log('Bulk unassign results: ', unassignedEvents);",
              "    return unassignedEvents;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"results\": [",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 0,",
              " *         \"success\": true,",
              " *         \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"workshop\",",
              " *         \"states\": [",
              " *           \"MANUAL\"",
              " *         ],",
              " *         \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " *         \"_createdDate\": \"2022-12-13T11:03:19.174Z\"",
              " *       }",
              " *     },",
              " *     {",
              " *       \"itemMetadata\": {",
              " *         \"originalIndex\": 1,",
              " *         \"success\": true,",
              " *         \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\"",
              " *       },",
              " *       \"item\": {",
              " *         \"name\": \"technology\",",
              " *         \"states\": [",
              " *           \"MANUAL\"",
              " *         ],",
              " *         \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\",",
              " *         \"_createdDate\": \"2023-07-12T11:07:35.776Z\"",
              " *       }",
              " *     }",
              " *   ],",
              " *   \"bulkActionMetadata\": {",
              " *     \"totalSuccesses\": 2,",
              " *     \"totalFailures\": 0,",
              " *     \"undetailedFailures\": 0",
              " *   }",
              " *  }",
              " */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "bulkUnassignEvents",
      "isAdminMethod": true
    },
    {
      "name": "bulkUnassignEventsAsync",
      "params": [
        {
          "name": "categoryId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Category ID.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.BulkUnassignEventsAsyncOptions"
            }
          ],
          "doc": "Options to use when removing events from multiple categories.",
          "required": true
        }
      ],
      "requiredFields": [
        "categoryId",
        "options",
        "options.filter"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Unassigns filtered events from multiple categories.",
        "description": [],
        "examples": [
          {
            "title": "Remove filtered events from multiple categories (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedBulkUnassignEventsAsync = elevate(categories.bulkUnassignEventsAsync);",
              "",
              "/* ",
              " * Sample categoryId value: [\"89d3e8d4-45bc-4439-9e74-7e21b3418c88\", \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"]",
              " * Sample options value:",
              " * {",
              " *   \"filter\": {",
              " *      \"_id\": \"4e5e4adb-9778-4171-a9bb-44e27834ac89\"",
              " *    }",
              " * }",
              " */",
              "",
              "export const myBulkUnassignEventsAsyncFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categoryId, options) => {",
              "    try {",
              "      const unassignedEvents = await elevatedBulkUnassignEventsAsync(categoryId, options);",
              "      console.log('Events are unassigned');",
              "      return unassignedEvents;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to void */"
            ]
          },
          {
            "title": "Remove events from multiple categories (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/* ",
              " * Sample categoryId value: [\"89d3e8d4-45bc-4439-9e74-7e21b3418c88\", \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"]",
              " * Sample options value:",
              " * {",
              " *   \"filter\": {",
              " *      \"_id\": \"4e5e4adb-9778-4171-a9bb-44e27834ac89\"",
              " *    }",
              " * }",
              " */",
              "",
              "export async function myBulkUnassignEventsAsyncFunction(categoryId, options) {",
              "  try {",
              "    const unassignedEvents = await categories.bulkUnassignEventsAsync(categoryId, options);",
              "    console.log('Events are unassigned from categories');",
              "    return unassignedEvents;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to void */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "bulkUnassignEventsAsync",
      "isAdminMethod": true
    },
    {
      "name": "createCategory",
      "params": [
        {
          "name": "category",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Category"
            }
          ],
          "doc": "Category to create.",
          "required": true
        }
      ],
      "requiredFields": [
        "category"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Categories.Category"
                }
              ]
            }
          }
        ],
        "doc": "Created category.\n"
      },
      "docs": {
        "summary": "Creates a category.",
        "description": [],
        "examples": [
          {
            "title": "Create a category (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedCreateCategory = elevate(categories.createCategory);",
              "",
              "/*",
              " * Sample category value:",
              " * {",
              " *  \"name\": \"leather\",",
              " *  \"states\": [\"MANUAL\"]",
              " * }",
              " */",
              "",
              "export const myCreateCategoryFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (category) => {",
              "    try {",
              "      const createdCategory = await elevatedCreateCategory(category);",
              "      console.log('Created category: ', createdCategory);",
              "      return createdCategory;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"name\": \"leather\",",
              " *   \"states\": [",
              " *     \"MANUAL\"",
              " *   ],",
              " *   \"_id\": \"7952f110-26fa-45a2-b9eb-d2997784659d\",",
              " *   \"_createdDate\": \"2024-04-23T11:16:38.455Z\"",
              " * }",
              " */"
            ]
          },
          {
            "title": "Create a category (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/*",
              " * Sample category value:",
              " * {",
              " *  \"name\": \"leather\",",
              " *  \"states\": [\"MANUAL\"]",
              " * }",
              " */",
              "",
              "export async function myCreateCategoryFunction(category) {",
              "  try {",
              "    const createdCategory = await categories.createCategory(category);",
              "    console.log('Created category: ', createdCategory);",
              "    return createdCategory;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"name\": \"leather\",",
              " *   \"states\": [",
              " *     \"MANUAL\"",
              " *   ],",
              " *   \"_id\": \"7952f110-26fa-45a2-b9eb-d2997784659d\",",
              " *   \"_createdDate\": \"2024-04-23T11:16:38.455Z\"",
              " * }",
              " */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "createCategory",
      "isAdminMethod": true
    },
    {
      "name": "deleteCategory",
      "params": [
        {
          "name": "categoryId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of category to be deleted.",
          "required": true
        }
      ],
      "requiredFields": [
        "categoryId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Deletes a category.",
        "description": [],
        "examples": [
          {
            "title": "Delete a category (export from backend page) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedDeleteCategory = elevate(categories.deleteCategory);",
              "",
              "// Sample categoryId value: \"5fa9929d-6782-4927-9b8c-304ca9ca6e93\"",
              "",
              "export const myDeleteCategoryFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categoryId) => {",
              "    try {",
              "      const deletedCategory = await elevatedDeleteCategory(categoryId);",
              "      console.log('Category is deleted');",
              "      return deletedCategory;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to void */"
            ]
          },
          {
            "title": "Delete a category (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "// Sample categoryId value: \"5fa9929d-6782-4927-9b8c-304ca9ca6e93\" ",
              "",
              "export async function myDeleteCategoryFunction(categoryId) {",
              "  try {",
              "    const deletedCategory = await categories.deleteCategory(categoryId);",
              "    console.log('Category is deleted');",
              "    return deletedCategory;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to void */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "deleteCategory",
      "isAdminMethod": true
    },
    {
      "name": "listEventCategories",
      "params": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID.",
          "required": true
        }
      ],
      "requiredFields": [
        "eventId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Categories.ListEventCategoriesResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Retrieves a list of categories that are not in the `HIDDEN` state.",
        "description": [],
        "examples": [
          {
            "title": "List event categories (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedListEventCategories = elevate(categories.listEventCategories);",
              "",
              "// Sample eventId value: \"4e5e4adb-9778-4171-a9bb-44e27834ac89\"",
              "",
              "export const myListEventCategoriesFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (eventId) => {",
              "    try {",
              "      const listedCategories = await elevatedListEventCategories(eventId);",
              "      console.log('Event categories: ', listedCategories);",
              "      return listedCategories;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to:",
              " *  {",
              " *    \"categories\": [",
              " *     {",
              " *       \"name\": \"workshop\",",
              " *       \"states\": [",
              " *         \"MANUAL\"",
              " *       ],",
              " *       \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " *       \"_createdDate\": \"2022-12-13T11:03:19.174Z\"",
              " *     },",
              " *     {",
              " *       \"name\": \"technology\",",
              " *       \"states\": [",
              " *         \"MANUAL\"",
              " *       ],",
              " *       \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\",",
              " *       \"_createdDate\": \"2023-07-12T11:07:35.776Z\"",
              " *     }",
              " *   ]",
              " * }",
              " */"
            ]
          },
          {
            "title": "List event categories ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "// Sample eventId value: \"4e5e4adb-9778-4171-a9bb-44e27834ac89\"",
              "",
              "export async function myListEventCategoriesFunction(eventId) {",
              "  try {",
              "    const listedCategories = await categories.listEventCategories(eventId);",
              "    console.log('Event categories: ', listedCategories);",
              "    return listedCategories;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"categories\": [",
              " *     {",
              " *       \"name\": \"workshop\",",
              " *       \"states\": [",
              " *         \"MANUAL\"",
              " *       ],",
              " *       \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " *       \"_createdDate\": \"2022-12-13T11:03:19.174Z\"",
              " *     },",
              " *     {",
              " *       \"name\": \"technology\",",
              " *       \"states\": [",
              " *         \"MANUAL\"",
              " *       ],",
              " *       \"_id\": \"89d3e8d4-45bc-4439-9e74-7e21b3418c88\",",
              " *       \"_createdDate\": \"2023-07-12T11:07:35.776Z\"",
              " *     }",
              " *   ]",
              " * }",
              " */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "listEventCategories"
    },
    {
      "name": "queryCategories",
      "params": [
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.QueryCategoriesOptions"
            }
          ],
          "doc": "Options to use when querying categories.\n",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Categories.CategoriesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Creates a query to retrieve a list of categories.",
        "description": [
          "",
          "",
          "The `queryCategories()` function builds a query to retrieve a list of categories and returns a [`CategoriesQueryBuilder`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder) object.",
          "",
          "The returned object contains the query definition, which is typically used to run the query using the [`find()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/find) function.",
          "",
          "You can refine the query by chaining `CategoriesQueryBuilder` functions onto the query. `CategoriesQueryBuilder` functions enable you to sort, filter, and control the results `queryCategories()` returns.",
          "",
          "`queryCategories()` runs with these `CategoriesQueryBuilder` defaults, which you can override:",
          "",
          " - [`limit(50)`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/limit)",
          "",
          "",
          "|PROPERTY\t|SUPPORTED FILTERS & SORTING\t",
          "|:---:|:---:|",
          "|`_id`|[`eq()`](wix-events-v2.Categories.CategoriesQueryBuilder#eq)|",
          "|`name`|[`eq()`](wix-events-v2.Categories.CategoriesQueryBuilder#eq)|",
          "|`_createdDate`|[`ascending()`](wix-events-v2.Categories.CategoriesQueryBuilder#ascending),[`descending()`](wix-events-v2.Categories.CategoriesQueryBuilder#descending)|"
        ],
        "examples": [
          {
            "title": "queryCategories example",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "async function queryCategories() {",
              "  const { items } = categories.queryCategories().find();",
              "}",
              ""
            ]
          },
          {
            "title": "queryCategories example for exporting from backend code",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "",
              "export const queryCategories = webMethod(",
              "  Permissions.Anyone,",
              "  async (query, options) => {",
              "    try {",
              "      const result = await categories.queryCategories(query, options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "queryCategories"
    },
    {
      "name": "reorderCategoryEvents",
      "params": [
        {
          "name": "categoryId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category ID",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.ReorderCategoryEventsOptions"
            }
          ],
          "doc": "Options to use when reordering events.",
          "required": false
        }
      ],
      "requiredFields": [
        "categoryId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Change the order of events that are assigned to the same category on the Events Widget.",
        "description": [
          "For more information see [this article](https://support.wix.com/en/article/creating-and-displaying-event-categories)"
        ],
        "examples": [
          {
            "title": "Change the order of events (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedReorderCategoryEvents = elevate(categories.reorderCategoryEvents);",
              "",
              "/* ",
              " * Sample categoryId value: \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " * Sample options value:",
              " * {",
              " *  \"eventId\": \"4e5e4adb-9778-4171-a9bb-44e27834ac89\",",
              " *  \"afterEventId\": \"32c0eab1-b7a0-4ec2-9fb6-db76f76ee488\"",
              " * }",
              "*/",
              "",
              "export const myReorderCategoryEventsFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categoryId, options) => {",
              "    try {",
              "      const reorderedEvents = await elevatedReorderCategoryEvents(categoryId, options);",
              "      console.log('Events are reordered');",
              "      return reorderedEvents;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to void */"
            ]
          },
          {
            "title": "Change the order of events (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/* ",
              " * Sample categoryId value: \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " * Sample options value:",
              " * {",
              " * \"eventId\": \"4e5e4adb-9778-4171-a9bb-44e27834ac89\",",
              " *  \"afterEventId\": \"32c0eab1-b7a0-4ec2-9fb6-db76f76ee488\"",
              " * }",
              " */",
              "",
              "export async function myReorderCategoryEventsFunction(categoryId, options) {",
              "  try {",
              "    const reorderedEvents = await categories.reorderCategoryEvents(categoryId, options);",
              "    console.log('Events are reordered');",
              "    return reorderedEvents;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to void */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "reorderCategoryEvents",
      "isAdminMethod": true
    },
    {
      "name": "unassignEvents",
      "params": [
        {
          "name": "categoryId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category ID.",
          "required": true
        },
        {
          "name": "eventId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of events IDs.",
          "required": true
        }
      ],
      "requiredFields": [
        "categoryId",
        "eventId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Unassigns events from a category.",
        "description": [],
        "examples": [
          {
            "title": "Remove a category from events (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedUnassignEvents = elevate(categories.unassignEvents);",
              "",
              "/* ",
              " * Sample categoryId value: \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " * Sample eventId value: [\"4e5e4adb-9778-4171-a9bb-44e27834ac89\"]",
              " */",
              "",
              "export const myUnassignEventsFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (categoryId, eventId) => {",
              "    try {",
              "      const unassignedEvents = await elevatedUnassignEvents(categoryId, eventId);",
              "      console.log('Events are unassigned from the category');",
              "      return unassignedEvents;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to void */"
            ]
          },
          {
            "title": "Remove a category from events (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/* ",
              " * Sample categoryId value: \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " * Sample eventId value: [\"4e5e4adb-9778-4171-a9bb-44e27834ac89\"]",
              " */",
              "",
              "export async function myUnassignEventsFunction(categoryId, eventId) {",
              "  try {",
              "    const unassignedEvents = await categories.unassignEvents(categoryId, eventId);",
              "    console.log('Events are unassigned from the category');",
              "    return unassignedEvents;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to void */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "unassignEvents",
      "isAdminMethod": true
    },
    {
      "name": "updateCategory",
      "params": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category ID.",
          "required": true
        },
        {
          "name": "category",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.UpdateCategory"
            }
          ],
          "doc": "",
          "required": true
        }
      ],
      "requiredFields": [
        "_id",
        "category"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Categories.Category"
                }
              ]
            }
          }
        ],
        "doc": "Updated category.\n"
      },
      "docs": {
        "summary": "Updates an existing category.",
        "description": [],
        "examples": [
          {
            "title": "Update a category (export from backend code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedUpdateCategory = elevate(categories.updateCategory);",
              "",
              "/* ",
              " * Sample _id value: \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " * Sample category value:",
              " * {",
              " *   \"name\": \"workshop-leather\"",
              " * }",
              " */",
              "",
              "export const myUpdateCategoryFunction = webMethod(",
              "  Permissions.Anyone,",
              "  async (_id, category) => {",
              "    try {",
              "      const updatedCategory = await elevatedUpdateCategory(_id, category);",
              "      console.log('Updated category: ', updatedCategory);",
              "      return updatedCategory;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              "",
              "/* Promise resolves to:",
              " * {",
              " *  \"name\": \"workshop-leather\",",
              " *  \"states\": [",
              " *    \"MANUAL\"",
              " *  ],",
              " *  \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " *  \"_createdDate\": \"2022-12-13T11:03:19.174Z\"",
              " * }",
              " */"
            ]
          },
          {
            "title": "Update a category (dashboard page code) ",
            "body": [
              "import { categories } from 'wix-events.v2';",
              "",
              "/* ",
              " * Sample _id value: \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\"",
              " * Sample category value:",
              " * {",
              " *   \"name\": \"workshop-leather\"",
              " * }",
              " */",
              "",
              "export async function myUpdateCategoryFunction(_id, category) {",
              "  try {",
              "    const updatedCategory = await categories.updateCategory(_id, category);",
              "    console.log('Updated category: ', updatedCategory);",
              "    return updatedCategory;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/* Promise resolves to:",
              " * {",
              " *  \"name\": \"workshop-leather\",",
              " *  \"states\": [",
              " *    \"MANUAL\"",
              " *  ],",
              " *  \"_id\": \"6ec293a8-1b47-4337-9c4e-9a6aeb35e66a\",",
              " *  \"_createdDate\": \"2022-12-13T11:03:19.174Z\"",
              " * }",
              " */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "updateCategory",
      "isAdminMethod": true
    }
  ],
  "messages": [
    {
      "name": "ApplicationError",
      "members": [
        {
          "name": "code",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Error code."
        },
        {
          "name": "data",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Data related to the error."
        },
        {
          "name": "description",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Description of the error."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "AssignEventsRequest",
      "members": [
        {
          "name": "categoryId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of category to which events should be assigned."
        },
        {
          "name": "eventId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of events IDs."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "AssignEventsResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkActionMetadata",
      "members": [
        {
          "name": "totalFailures",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items that couldn't be processed."
        },
        {
          "name": "totalSuccesses",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items that were successfully processed."
        },
        {
          "name": "undetailedFailures",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of failures without details due to exceeding the threshold for detailed failures."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkAssignEventsAsyncOptions",
      "members": [
        {
          "name": "filter",
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Criteria that must be met for an event to be considered for the bulk assign. Supported filters for this API:\n- `_id`: [`eq()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/eq)\n- `name`: [`eq()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/eq)"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkAssignEventsAsyncRequest",
      "members": [
        {
          "name": "categoryId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Category IDs."
        },
        {
          "name": "filter",
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Criteria that must be met for an event to be considered for the bulk assign. Supported filters for this API:\n- `_id`: [`eq()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/eq)\n- `name`: [`eq()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/eq)"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkAssignEventsAsyncResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkAssignEventsOptions",
      "members": [
        {
          "name": "eventId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of events IDs."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkAssignEventsRequest",
      "members": [
        {
          "name": "categoryId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of category IDs to which events should be assigned."
        },
        {
          "name": "eventId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of events IDs."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkAssignEventsResponse",
      "members": [
        {
          "name": "bulkActionMetadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.BulkActionMetadata"
            }
          ],
          "doc": "Metadata of results."
        },
        {
          "name": "results",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Categories.BulkCategoryResult"
                  }
                ]
              }
            }
          ],
          "doc": "Results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkCategoryResult",
      "members": [
        {
          "name": "item",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Category"
            }
          ],
          "doc": "Created categories."
        },
        {
          "name": "itemMetadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.ItemMetadata"
            }
          ],
          "doc": "Metadata."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkCreateCategoryRequest",
      "members": [
        {
          "name": "categories",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Categories.Category"
                  }
                ]
              }
            }
          ],
          "doc": "Categories to create."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkCreateCategoryResponse",
      "members": [
        {
          "name": "bulkActionMetadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.BulkActionMetadata"
            }
          ],
          "doc": "Metadata of results."
        },
        {
          "name": "results",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Categories.BulkCategoryResult"
                  }
                ]
              }
            }
          ],
          "doc": "Bulk create results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkUnassignEventsAsyncOptions",
      "members": [
        {
          "name": "filter",
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Criteria that must be met for an event to be considered for the bulk assign. Supported filters for this API:\n- `_id`: [`eq()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/eq)\n- `name`: [`eq()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/eq)"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkUnassignEventsAsyncRequest",
      "members": [
        {
          "name": "categoryId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Category ID."
        },
        {
          "name": "filter",
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Criteria that must be met for an event to be considered for the bulk assign. Supported filters for this API:\n- `_id`: [`eq()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/eq)\n- `name`: [`eq()`](https://www.wix.com/velo/reference/wix-events-v2/categories/categoriesquerybuilder/eq)"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkUnassignEventsAsyncResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkUnassignEventsOptions",
      "members": [
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of events IDs."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkUnassignEventsRequest",
      "members": [
        {
          "name": "categoryId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of category IDs."
        },
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of events IDs."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkUnassignEventsResponse",
      "members": [
        {
          "name": "bulkActionMetadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.BulkActionMetadata"
            }
          ],
          "doc": "Metadata of results."
        },
        {
          "name": "results",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Categories.BulkCategoryResult"
                  }
                ]
              }
            }
          ],
          "doc": "Results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Category",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Category creation timestamp."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category ID."
        },
        {
          "name": "counts",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.CategoryCounts"
            }
          ],
          "doc": "The total number of draft and published events assigned to the category."
        },
        {
          "name": "name",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category name."
        },
        {
          "name": "states",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Category state. Possible values:\n- `MANUAL`: Category is created manually by the user.\n- `AUTO`: Category is created automatically.\n- `RECURRING_EVENT`: Category is created automatically when publishing recurring events.\n- `HIDDEN`: Category can't be seen.\n\nDefault: `MANUAL`.\n\n**Note:** The WIX_EVENTS.MANAGE_AUTO_CATEGORIES permission is required to use states other than `MANUAL`.\n"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CategoryCounts",
      "members": [
        {
          "name": "assignedDraftEventsCount",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of draft events assigned to the category."
        },
        {
          "name": "assignedEventsCount",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of published events assigned to the category. Deleted events are excluded."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateCategoryRequest",
      "members": [
        {
          "name": "category",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Category"
            }
          ],
          "doc": "Category to create."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateCategoryResponse",
      "members": [
        {
          "name": "category",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Category"
            }
          ],
          "doc": "Created category."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Cursors",
      "members": [
        {
          "name": "next",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor string pointing to the next page in the list of results."
        },
        {
          "name": "prev",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor pointing to the previous page in the list of results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteCategoryRequest",
      "members": [
        {
          "name": "categoryId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of category to be deleted."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteCategoryResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ItemMetadata",
      "members": [
        {
          "name": "_id",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Item ID. Should always be available, unless it's impossible (for example, when failing to create an item)."
        },
        {
          "name": "error",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.ApplicationError"
            }
          ],
          "doc": "Details about the error in case of failure."
        },
        {
          "name": "originalIndex",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Index of the item within the request array. Allows for correlation between request and response items."
        },
        {
          "name": "success",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the requested action was successful for this item. When `false`, the `error` field is populated."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ListEventCategoriesRequest",
      "members": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ListEventCategoriesResponse",
      "members": [
        {
          "name": "categories",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Categories.Category"
                  }
                ]
              }
            }
          ],
          "doc": "A list of categories."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Paging",
      "members": [
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to load per page."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to skip in the current sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PagingMetadataV2",
      "members": [
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items returned in the response."
        },
        {
          "name": "cursors",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Cursors"
            }
          ],
          "doc": "Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Offset that was requested."
        },
        {
          "name": "tooManyToCount",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Flag that indicates the server failed to calculate the `total` field."
        },
        {
          "name": "total",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryCategoriesOptions",
      "members": [
        {
          "name": "fieldset",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Predefined sets of fields to return.\n- `COUNTS`: Returns `assignedEventsCount`."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryCategoriesRequest",
      "members": [
        {
          "name": "fieldset",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Predefined sets of fields to return.\n- `COUNTS`: Returns `assignedEventsCount`."
        },
        {
          "name": "query",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.QueryV2"
            }
          ],
          "doc": "Query options. See [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language) for more details."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryCategoriesResponse",
      "members": [
        {
          "name": "categories",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Categories.Category"
                  }
                ]
              }
            }
          ],
          "doc": "List of categories."
        },
        {
          "name": "metaData",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.PagingMetadataV2"
            }
          ],
          "doc": "Metadata for the paginated results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryV2",
      "members": [
        {
          "name": "filter",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Filter. See [supported fields and operators](https://dev.wix.com/api/rest/wix-events/wix-events/filter-and-sort#wix-events_wix-events_filter-and-sort_list-query-events)."
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Paging"
            }
          ],
          "doc": "Pointer to page of results using offset.\nSee [Pagination](https://dev.wix.com/api/rest/getting-started/pagination)."
        },
        {
          "name": "sort",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Categories.Sorting"
                  }
                ]
              }
            }
          ],
          "doc": "Sort object in the form [{\"fieldName\":\"sortField1\"},{\"fieldName\":\"sortField2\",\"direction\":\"DESC\"}]\nSee [supported fields](https://dev.wix.com/api/rest/wix-events/wix-events/filter-and-sort#wix-events_wix-events_filter-and-sort_list-query-events)."
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfQueryV2PagingMethodOneOf",
            "members": [
              "paging"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryV2PagingMethodOneOf",
      "members": [
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Paging"
            }
          ],
          "doc": "Pointer to page of results using offset.\nSee [Pagination](https://dev.wix.com/api/rest/getting-started/pagination)."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReorderCategoryEventsOptions",
      "members": [
        {
          "name": "afterEventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the event after defined `eventId`."
        },
        {
          "name": "beforeEventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the event before defined `eventId`."
        },
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfReorderCategoryEventsRequestReferenceEventOneOf",
            "members": [
              "afterEventId",
              "beforeEventId"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReorderCategoryEventsRequest",
      "members": [
        {
          "name": "afterEventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the event after defined `eventId`."
        },
        {
          "name": "beforeEventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the event before defined `eventId`."
        },
        {
          "name": "categoryId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category ID"
        },
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfReorderCategoryEventsRequestReferenceEventOneOf",
            "members": [
              "afterEventId",
              "beforeEventId"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReorderCategoryEventsRequestReferenceEventOneOf",
      "members": [
        {
          "name": "afterEventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the event after defined `eventId`."
        },
        {
          "name": "beforeEventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the event before defined `eventId`."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReorderCategoryEventsResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Sorting",
      "members": [
        {
          "name": "fieldName",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Name of the field to sort by"
        },
        {
          "name": "order",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Sort order (ASC/DESC). Defaults to ASC"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UnassignEventsRequest",
      "members": [
        {
          "name": "categoryId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category ID."
        },
        {
          "name": "eventId",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "A list of events IDs."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UnassignEventsResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateCategory",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Category creation timestamp."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category ID."
        },
        {
          "name": "counts",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.CategoryCounts"
            }
          ],
          "doc": "The total number of draft and published events assigned to the category."
        },
        {
          "name": "name",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category name."
        },
        {
          "name": "states",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Category state. Possible values:\n- `MANUAL`: Category is created manually by the user.\n- `AUTO`: Category is created automatically.\n- `RECURRING_EVENT`: Category is created automatically when publishing recurring events.\n- `HIDDEN`: Category can't be seen.\n\nDefault: `MANUAL`.\n\n**Note:** The WIX_EVENTS.MANAGE_AUTO_CATEGORIES permission is required to use states other than `MANUAL`.\n"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateCategoryRequest",
      "members": [
        {
          "name": "category",
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Category"
            }
          ],
          "doc": "Category update."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateCategoryResponse",
      "members": [
        {
          "name": "category",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Categories.Category"
            }
          ],
          "doc": "Updated category."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    }
  ]
}
