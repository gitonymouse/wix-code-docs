{ "name": "PanelThumbnails",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedMixin",
      "$w.Element" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "PanelThumbnails.js" },
  "docs":
    { "summary": "Thumbnails allow users to select an option using a set of thumbnail images in a Blocks panel.",
      "description":
        [ "Thumbnails allow users to select an option using a set of thumbnail images.",
          "",
          "> **Important**:  ",
          "> This element is available only in [custom panels built in Blocks](https://support.wix.com/en/article/wix-blocks-designing-custom-panels-for-your-widgets-action-bar-buttons).  ",
          "> [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is a workspace for building Wix apps. It is currently a Beta version, open to a limited number of users." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "divider",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"long\"",
        "locations":
          [ { "lineno": 80,
              "filename": "PanelThumbnails.js" },
            { "lineno": 97,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed under the element.",
            "description":
              [ "The divider type can be:",
                "* `\"long\"`",
                "* `\"short\"`",
                "* `\"none\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get an element's divider type",
                  "body":
                    [ "let divider = $w(\"#myElement\").divider;  // \"none\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's divider type",
                  "body":
                    [ "$w(\"#myElement\").divider = \"none\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 61,
              "filename": "PanelThumbnails.js" },
            { "lineno": 73,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the label of an element.",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let label = $w(\"#myElement\").label;  // \"My element's label\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "numberOfColumns",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Nunber",
        "defaultValue": "3",
        "locations":
          [ { "lineno": 104,
              "filename": "PanelThumbnails.js" },
            { "lineno": 116,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the number of thumbnail columns. The minimum value is 1, maximum is 5.",
            "links": [],
            "examples":
              [ { "title": "Get the number of thumbnail columns",
                  "body":
                    [ "let columns = $w(\"#myThumbnails\").numberOfColumns; // 2" ],
                  "extra":
                    {  } },
                { "title": "Set the number of thumbnail columns",
                  "body":
                    [ "$w(\"#myThumbnails\").numberOfColumns = 2;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.PanelThumbnails.option" ] },
        "defaultValue": "empty array",
        "locations":
          [ { "lineno": 188,
              "filename": "PanelThumbnails.js" },
            { "lineno": 203,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the options in the thumbnail group.",
            "description":
              [ "`options` is an array of objects, each representing an option available to a user." ],
            "links": [],
            "examples":
              [ { "title": "Get the list of options and the first option's label and value from a thumbnail group",
                  "body":
                    [ "let thumbnailsOptions = $w(\"#myThumbnails\").options;",
                      "",
                      "let firstLabel = thumbnailsOptions[0].label;  // \"First Label\"",
                      "let firstValue = thumbnailsOptions[0].value;  // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the list of options for a thumbnail group",
                  "body":
                    [ "$w(\"#myThumbnails\").options = [",
                      "  {\"label\": \"Who's on first!\", \"value\": \"first\"},",
                      "  {\"label\": \"What's on second\", \"value\": \"second\"},",
                      "  {\"label\": \"I Don't Know is on third\", \"value\": \"third\"}",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add an option to a thumbnail group",
                  "body":
                    [ "let opts = $w(\"#myThumbnails\").options;",
                      "opts.push({\"label\": \"New Label\", \"value\": \"New Value\"});",
                      "$w(\"#myThumbnails\").options = opts;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showEmptyThumbnail",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 148,
              "filename": "PanelThumbnails.js" },
            { "lineno": 160,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets whether empty thumbnails are shown.",
            "links": [],
            "examples":
              [ { "title": "Get whether empty thumbnails are shown",
                  "body":
                    [ "let emptyThumbnailsShown = $w(\"#myThumbnails\").showEmptyThumbnail;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set empty thumbnails to be shown",
                  "body":
                    [ "$w(\"#myThumbnails\").showEmptyThumbnail = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showLabels",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 168,
              "filename": "PanelThumbnails.js" },
            { "lineno": 180,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets whether the thumbnail labels are displayed.",
            "links": [],
            "examples":
              [ { "title": "Get whether the thumbnail labels are displayed",
                  "body":
                    [ "let labelsShown = $w(\"#myThumbnails\").showLabels;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set thumbnail labels to be displayed",
                  "body":
                    [ "$w(\"#myThumbnails\").showLabels = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "thumbnailHeight",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"Fixed ratio (1:1)\"",
        "locations":
          [ { "lineno": 124,
              "filename": "PanelThumbnails.js" },
            { "lineno": 140,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the thumbnails' height ratio.",
            "description":
              [ "The height ratio can be:",
                "* `\"Fixed ratio (1:1)\"`",
                "* `\"Fluid\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get the thumbnails' height ratio",
                  "body":
                    [ "let height = $w(\"#myThumbnails\").thumbnailHeight; // \"Fluid\"" ],
                  "extra":
                    {  } },
                { "title": "Set the thumbnails' height ratio",
                  "body":
                    [ "$w(\"#myThumbnails\").thumbnailHeight = \"Fluid\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 41,
              "filename": "PanelThumbnails.js" },
            { "lineno": 55,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip;  // \"Tooltip text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"New tooltip\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 19,
              "filename": "PanelThumbnails.js" },
            { "lineno": 35,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets an element's value.",
            "description":
              [ "To reset the element, set the value",
                " property to `null` or `undefined`.",
                "",
                "> **Note**: Changing an element's `value` in code does not trigger an `onChange` event." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"option-1\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"option-1\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 228,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onChange()`",
                " because the property at this point contains values prior to the `onChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "illustration",
        "locations":
          [ { "lineno": 220,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "An object representing an SVG illustration.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "svgId",
              "type": "string",
              "doc": "An SVG element" } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "option",
        "locations":
          [ { "lineno": 210,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "An object representing a thumbnail option.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "label",
              "type": "string",
              "doc": "The label of the thumbnail option, optionally displayed below the thumbnail." },
            { "name": "value",
              "type": "string",
              "doc": "The value of the thumbnail option. This is what you use in code." },
            { "name": "illustration",
              "type": "$w.PanelThumbnails.illustration",
              "doc": "The thumbnail illustration in SVG format" } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }