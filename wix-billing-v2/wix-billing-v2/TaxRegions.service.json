{
  "name": "TaxRegions",
  "memberOf": "wix-billing-v2",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-billing.v2-tax_region",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "bulkCreateTaxRegion",
      "params": [
        {
          "name": "taxRegions",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
                  }
                ]
              }
            }
          ],
          "doc": "a sequence of tax regions to be created by bulk",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.BulkCreateTaxRegionOptions"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [
        "taxRegions"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-billing-v2.TaxRegions.BulkCreateTaxRegionResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Create multiple Tax Regions by Bulk",
        "description": [],
        "examples": [
          {
            "title": "bulkCreateTaxRegion example",
            "body": [
              "import { taxRegions } from 'wix-billing.v2';",
              "  ",
              " async function bulkCreateTaxRegion(taxRegions, options) {",
              "   try {",
              "     const result = await taxRegions.bulkCreateTaxRegion(taxRegions, options);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "bulkCreateTaxRegion",
      "isAdminMethod": true
    },
    {
      "name": "createTaxRegion",
      "params": [
        {
          "name": "taxRegion",
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
            }
          ],
          "doc": "TaxRegion to be created",
          "required": true
        }
      ],
      "requiredFields": [
        "taxRegion",
        "taxRegion.appId",
        "taxRegion.country",
        "taxRegion.taxIncludedInPrice"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
                }
              ]
            }
          }
        ],
        "doc": "The created TaxRegion\n"
      },
      "docs": {
        "summary": "Creates a new TaxRegion.\nOnce the tax region is created, it is possible to configure the tax group mappings for the tax region.\nThe tax group mappings are used by the built-in calculators to calculate the tax for a given tax group.",
        "description": [],
        "examples": [
          {
            "title": "createTaxRegion example",
            "body": [
              "import { taxRegions } from 'wix-billing.v2';",
              "  ",
              " async function createTaxRegion(taxRegion, options) {",
              "   try {",
              "     const result = await taxRegions.createTaxRegion(taxRegion, options);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "createTaxRegion",
      "isAdminMethod": true
    },
    {
      "name": "deleteTaxRegion",
      "params": [
        {
          "name": "taxRegionId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Id of the TaxRegion to delete",
          "required": true
        }
      ],
      "requiredFields": [
        "taxRegionId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Delete a TaxRegion",
        "description": [
          "Triggers a side effect of deleting all mappings that are associated with this TaxRegion on the built-in calculators.\nFor Avalara calculator, all the mappings that are associated with this TaxRegion will be deleted.\nFor Manual calculator, all the \"wix.billing.v1.manual_calc.tax_group_mapping\" that are associated with this TaxRegion will be deleted.\nFor external calculators, this side effect is not guaranteed.\n\nDeleting a TaxRegion means that tax is not collected for the region anymore and so zero tax will be returned for addresses of this region."
        ],
        "examples": [
          {
            "title": "deleteTaxRegion example",
            "body": [
              "import { taxRegions } from 'wix-billing.v2';",
              "  ",
              " async function deleteTaxRegion(taxRegionId) {",
              "   try {",
              "     const result = await taxRegions.deleteTaxRegion(taxRegionId);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "deleteTaxRegion",
      "isAdminMethod": true
    },
    {
      "name": "getTaxRegion",
      "params": [
        {
          "name": "taxRegionId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Id of the TaxRegion to retrieve",
          "required": true
        }
      ],
      "requiredFields": [
        "taxRegionId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
                }
              ]
            }
          }
        ],
        "doc": "The retrieved TaxRegion\n"
      },
      "docs": {
        "summary": "Get a TaxRegion by id",
        "description": [],
        "examples": [
          {
            "title": "getTaxRegion example",
            "body": [
              "import { taxRegions } from 'wix-billing.v2';",
              "  ",
              " async function getTaxRegion(taxRegionId) {",
              "   try {",
              "     const result = await taxRegions.getTaxRegion(taxRegionId);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getTaxRegion",
      "isAdminMethod": true
    },
    {
      "name": "queryTaxRegions",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Query TaxRegions using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)",
        "description": [
          "",
          "",
          "|PROPERTY\t|SUPPORTED FILTERS & SORTING\t",
          "|:---:|:---:|",
          "|`_id`|[`eq()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#eq),[`ne()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ne),[`exists()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#exists),[`in()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#in),[`hasSome()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#hasSome),[`startsWith()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#startsWith),[`ascending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ascending),[`descending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#descending)|",
          "|`country`|[`eq()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#eq),[`ne()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ne),[`exists()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#exists),[`in()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#in),[`hasSome()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#hasSome),[`startsWith()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#startsWith),[`ascending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ascending),[`descending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#descending)|",
          "|`subdivision`|[`eq()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#eq),[`ne()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ne),[`exists()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#exists),[`in()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#in),[`hasSome()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#hasSome),[`startsWith()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#startsWith),[`ascending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ascending),[`descending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#descending)|",
          "|`appId`|[`eq()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#eq),[`ne()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ne),[`exists()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#exists),[`in()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#in),[`hasSome()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#hasSome),[`startsWith()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#startsWith),[`ascending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ascending),[`descending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#descending)|",
          "|`_createdDate`|[`eq()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#eq),[`ne()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ne),[`exists()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#exists),[`in()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#in),[`hasSome()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#hasSome),[`lt()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#lt),[`le()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#le),[`gt()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#gt),[`ge()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ge),[`ascending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ascending),[`descending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#descending)|",
          "|`_updatedDate`|[`eq()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#eq),[`ne()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ne),[`exists()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#exists),[`in()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#in),[`hasSome()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#hasSome),[`lt()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#lt),[`le()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#le),[`gt()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#gt),[`ge()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ge),[`ascending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#ascending),[`descending()`](wix-billing-v2.TaxRegions.TaxRegionsQueryBuilder#descending)|"
        ],
        "examples": [
          {
            "title": "queryTaxRegions example",
            "body": [
              "import { taxRegions } from 'wix-billing.v2';",
              "  ",
              " async function queryTaxRegions() {",
              "   const { items } = taxRegions.queryTaxRegions().find();",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "queryTaxRegions",
      "isAdminMethod": true
    },
    {
      "name": "updateTaxRegion",
      "params": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "TaxRegion ID",
          "required": true
        },
        {
          "name": "taxRegion",
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.UpdateTaxRegion"
            }
          ],
          "doc": "",
          "required": true
        }
      ],
      "requiredFields": [
        "_id",
        "taxRegion",
        "taxRegion.revision"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
                }
              ]
            }
          }
        ],
        "doc": "The updated TaxRegion\n"
      },
      "docs": {
        "summary": "Update a TaxRegion, supports partial update\nPass the latest `revision` for a successful update",
        "description": [],
        "examples": [
          {
            "title": "updateTaxRegion example",
            "body": [
              "import { taxRegions } from 'wix-billing.v2';",
              "  ",
              " async function updateTaxRegion(id, taxRegion, options) {",
              "   try {",
              "     const result = await taxRegions.updateTaxRegion(id, taxRegion, options);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "updateTaxRegion",
      "isAdminMethod": true
    }
  ],
  "messages": [
    {
      "name": "ActionEvent",
      "members": [
        {
          "name": "bodyAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ApplicationError",
      "members": [
        {
          "name": "code",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Error code."
        },
        {
          "name": "data",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Data related to the error."
        },
        {
          "name": "description",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Description of the error."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkActionMetadata",
      "members": [
        {
          "name": "totalFailures",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items that couldn't be processed."
        },
        {
          "name": "totalSuccesses",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items that were successfully processed."
        },
        {
          "name": "undetailedFailures",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of failures without details because detailed failure threshold was exceeded."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkCreateTaxRegionOptions",
      "members": [
        {
          "name": "returnEntity",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether to return the full tax_region entity in the response."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkCreateTaxRegionRequest",
      "members": [
        {
          "name": "returnEntity",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether to return the full tax_region entity in the response."
        },
        {
          "name": "taxRegions",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
                  }
                ]
              }
            }
          ],
          "doc": "a sequence of tax regions to be created by bulk"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkCreateTaxRegionResponse",
      "members": [
        {
          "name": "bulkActionMetadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.BulkActionMetadata"
            }
          ],
          "doc": "Bulk action metadata."
        },
        {
          "name": "results",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-billing-v2.TaxRegions.BulkCreateTaxRegionResult"
                  }
                ]
              }
            }
          ],
          "doc": "Tax regions created by bulk."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BulkCreateTaxRegionResult",
      "members": [
        {
          "name": "item",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
            }
          ],
          "doc": "The created TaxRegion, Only exists if `returnEntity` was set to true in the request"
        },
        {
          "name": "itemMetadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.ItemMetadata"
            }
          ],
          "doc": "Information about successful action or error for failure."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ConflictErrorDetails",
      "members": [
        {
          "name": "reasonForConflict",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "reason for conflict"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateTaxRegionOptions",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateTaxRegionRequest",
      "members": [
        {
          "name": "taxRegion",
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
            }
          ],
          "doc": "TaxRegion to be created"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateTaxRegionResponse",
      "members": [
        {
          "name": "taxRegion",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
            }
          ],
          "doc": "The created TaxRegion"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorPaging",
      "members": [
        {
          "name": "cursor",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Pointer to the next or previous page in the list of results.\n\nPass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\nNot relevant for the first request.\n"
        },
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Maximum number of items to return in the results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorPagingMetadata",
      "members": [
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items returned in the response."
        },
        {
          "name": "cursors",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.Cursors"
            }
          ],
          "doc": "Cursor strings that point to the next page, previous page, or both."
        },
        {
          "name": "hasNext",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether there are more pages to retrieve following the current page.\n\n+ `true`: Another page of results can be retrieved.\n+ `false`: This is the last page.\n"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorQuery",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.CursorPaging"
            }
          ],
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`."
        },
        {
          "name": "filter",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Filter object in the following format:\n`\"filter\" : {\n\"fieldName1\": \"value1\",\n\"fieldName2\":{\"$operator\":\"value2\"}\n}`\nExample of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`"
        },
        {
          "name": "sort",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-billing-v2.TaxRegions.Sorting"
                  }
                ]
              }
            }
          ],
          "doc": "Sort object in the following format:\n`[{\"fieldName\":\"sortField1\",\"order\":\"ASC\"},{\"fieldName\":\"sortField2\",\"order\":\"DESC\"}]`"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfCursorQueryPagingMethodOneOf",
            "members": [
              "cursorPaging"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorQueryPagingMethodOneOf",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.CursorPaging"
            }
          ],
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Cursors",
      "members": [
        {
          "name": "next",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor string pointing to the next page in the list of results."
        },
        {
          "name": "prev",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor pointing to the previous page in the list of results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteTaxRegionRequest",
      "members": [
        {
          "name": "taxRegionId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Id of the TaxRegion to delete"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteTaxRegionResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEvent",
      "members": [
        {
          "name": "_id",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Unique event ID.\nAllows clients to ignore duplicate webhooks."
        },
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "entityEventSequence",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A sequence number defining the order of updates to the underlying entity.\nFor example, given that some entity was updated at 16:00 and than again at 16:01,\nit is guaranteed that the sequence number of the second update is strictly higher than the first.\nAs the consumer, you can use this value to ensure that you handle messages in the correct order.\nTo do so, you will need to persist this number on your end, and compare the sequence number from the\nmessage against the one you have stored. Given that the stored number is higher, you should ignore the message."
        },
        {
          "name": "entityFqdn",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Assumes actions are also always typed to an entity_type\nExample: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction"
        },
        {
          "name": "entityId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the entity associated with the event."
        },
        {
          "name": "eventTime",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event timestamp."
        },
        {
          "name": "originatedFrom",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "If present, indicates the action that triggered the event."
        },
        {
          "name": "slug",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\nThis is although the created/updated/deleted notion is duplication of the oneof types\nExample: created/updated/deleted/started/completed/email_opened"
        },
        {
          "name": "triggeredByAnonymizeRequest",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the event was triggered as a result of a privacy regulation application\n(for example, GDPR)."
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfDomainEventBodyOneOf",
            "members": [
              "actionEvent",
              "createdEvent",
              "deletedEvent",
              "updatedEvent"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEventBodyOneOf",
      "members": [
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityCreatedEvent",
      "members": [
        {
          "name": "entityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityDeletedEvent",
      "members": [
        {
          "name": "deletedEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Entity that was deleted"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityUpdatedEvent",
      "members": [
        {
          "name": "currentEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\nThis means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\nWe don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetTaxRegionRequest",
      "members": [
        {
          "name": "taxRegionId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Id of the TaxRegion to retrieve"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetTaxRegionResponse",
      "members": [
        {
          "name": "taxRegion",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
            }
          ],
          "doc": "The retrieved TaxRegion"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ItemMetadata",
      "members": [
        {
          "name": "_id",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Item ID. Should always be available, unless it's impossible (for example, when failing to create an item)."
        },
        {
          "name": "error",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.ApplicationError"
            }
          ],
          "doc": "Details about the error in case of failure."
        },
        {
          "name": "originalIndex",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Index of the item within the request array. Allows for correlation between request and response items."
        },
        {
          "name": "success",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the requested action was successful for this item. When `false`, the `error` field is populated."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryTaxRegionsRequest",
      "members": [
        {
          "name": "query",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.CursorQuery"
            }
          ],
          "doc": "WQL expression"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryTaxRegionsResponse",
      "members": [
        {
          "name": "pagingMetadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.CursorPagingMetadata"
            }
          ],
          "doc": "Paging metadata"
        },
        {
          "name": "taxRegions",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
                  }
                ]
              }
            }
          ],
          "doc": "The retrieved TaxRegions"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Sorting",
      "members": [
        {
          "name": "fieldName",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Name of the field to sort by."
        },
        {
          "name": "order",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "TaxRegion",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time this TaxRegion was created."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "TaxRegion ID"
        },
        {
          "name": "_updatedDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time this TaxRegion was last updated."
        },
        {
          "name": "appId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The primary calculator appDefId for this region.\nNote that for any calculator you should set fallback manual rates to be used in case the calculator fails.\ne.g For Avalara calculator use \"7516f85b-0868-4c23-9fcb-cea7784243df\".\nSince Avalara is a premium service, on downgrade to free plan, the Avalara calculator will be replaced with Manual calculator.\nAvalara regions must have corresponding nexuses in Avalara for the tax calculation to work properly."
        },
        {
          "name": "country",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Two-letter country code in ISO-3166 alpha-2 format."
        },
        {
          "name": "revision",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Represents the current state of an item. Each time the item is modified, its `revision` changes by the server. for an update operation to succeed, you MUST pass the latest revision"
        },
        {
          "name": "subdivision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Code for a subdivision (such as state, prefecture, or province) in ISO 3166-2 format.\nIf tax region is defined for a country, subdivision must be equal to \"*\". if not provided, it will be set to \"*\"."
        },
        {
          "name": "taxIncludedInPrice",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "indicates if the price for this region includes the tax. In some countries, like in EU, the displayed price must include tax."
        }
      ],
      "docs": {
        "description": [
          "TaxRegion is the main entity of TaxRegionsService that can be used to define where you collect taxes and how.\nCountry and subdivision represent the location and the method is referred by the calculator_id.\nAll available calculators can be fetched by TaxService.ListTaxCalculators API."
        ]
      }
    },
    {
      "name": "UpdateTaxRegion",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time this TaxRegion was created."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "TaxRegion ID"
        },
        {
          "name": "_updatedDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time this TaxRegion was last updated."
        },
        {
          "name": "appId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The primary calculator appDefId for this region.\nNote that for any calculator you should set fallback manual rates to be used in case the calculator fails.\ne.g For Avalara calculator use \"7516f85b-0868-4c23-9fcb-cea7784243df\".\nSince Avalara is a premium service, on downgrade to free plan, the Avalara calculator will be replaced with Manual calculator.\nAvalara regions must have corresponding nexuses in Avalara for the tax calculation to work properly."
        },
        {
          "name": "country",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Two-letter country code in ISO-3166 alpha-2 format."
        },
        {
          "name": "revision",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Represents the current state of an item. Each time the item is modified, its `revision` changes by the server. for an update operation to succeed, you MUST pass the latest revision"
        },
        {
          "name": "subdivision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Code for a subdivision (such as state, prefecture, or province) in ISO 3166-2 format.\nIf tax region is defined for a country, subdivision must be equal to \"*\". if not provided, it will be set to \"*\"."
        },
        {
          "name": "taxIncludedInPrice",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "indicates if the price for this region includes the tax. In some countries, like in EU, the displayed price must include tax."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateTaxRegionOptions",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateTaxRegionRequest",
      "members": [
        {
          "name": "taxRegion",
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
            }
          ],
          "doc": "TaxRegion to be updated, may be partial"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateTaxRegionResponse",
      "members": [
        {
          "name": "taxRegion",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-billing-v2.TaxRegions.TaxRegion"
            }
          ],
          "doc": "The updated TaxRegion"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    }
  ]
}
