{
  "name": "Posts",
  "memberOf": "wix-forum-v2",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-forum.v2-post",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "addReaction",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID",
          "required": true
        },
        {
          "name": "reactionCode",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Code of reaction to add.",
          "required": true
        }
      ],
      "requiredFields": [
        "postId",
        "reactionCode"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-forum-v2.Posts.AddReactionResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds reaction to post",
        "description": [],
        "examples": [
          {
            "title": "addReaction example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function addReaction(postId, reactionCode) {",
              "  try {",
              "    const result = await posts.addReaction(postId, reactionCode);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "addReaction example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedAddReaction = elevate(posts.addReaction);",
              "",
              "export const addReaction = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId, reactionCode) => {",
              "    try {",
              "      const result = await elevatedAddReaction(postId, reactionCode);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "addReaction",
      "isAdminMethod": true
    },
    {
      "name": "createPost",
      "params": [
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.CreatePostOptions"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [
        "options.post.categoryId",
        "options.post.title"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-forum-v2.Posts.Post"
                }
              ]
            }
          }
        ],
        "doc": "Created post.\n"
      },
      "docs": {
        "summary": "Creates a new post.",
        "description": [],
        "examples": [
          {
            "title": "createPost example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function createPost(options) {",
              "  try {",
              "    const result = await posts.createPost(options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "createPost example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedCreatePost = elevate(posts.createPost);",
              "",
              "export const createPost = webMethod(",
              "  Permissions.Anyone,",
              "  async (options) => {",
              "    try {",
              "      const result = await elevatedCreatePost(options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "createPost",
      "isAdminMethod": true
    },
    {
      "name": "deletePost",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the post to delete.",
          "required": true
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-forum-v2.Posts.DeletePostResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Deletes a post.",
        "description": [],
        "examples": [
          {
            "title": "deletePost example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function deletePost(postId) {",
              "  try {",
              "    const result = await posts.deletePost(postId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "deletePost example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedDeletePost = elevate(posts.deletePost);",
              "",
              "export const deletePost = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId) => {",
              "    try {",
              "      const result = await elevatedDeletePost(postId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "deletePost",
      "isAdminMethod": true
    },
    {
      "name": "getPost",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.GetPostOptions"
            }
          ],
          "doc": "Options specifying which additional fields to return.",
          "required": false
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-forum-v2.Posts.Post"
                }
              ]
            }
          }
        ],
        "doc": "Post for the provided post ID.\n"
      },
      "docs": {
        "summary": "Retrieves a single post by ID.",
        "description": [],
        "examples": [
          {
            "title": "getPost example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function getPost(postId, options) {",
              "  try {",
              "    const result = await posts.getPost(postId, options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "getPost example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedGetPost = elevate(posts.getPost);",
              "",
              "export const getPost = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId, options) => {",
              "    try {",
              "      const result = await elevatedGetPost(postId, options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getPost",
      "isAdminMethod": true
    },
    {
      "name": "getPostBySlug",
      "params": [
        {
          "name": "slug",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "URL slug.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.GetPostBySlugOptions"
            }
          ],
          "doc": "Options specifying which additional fields to return.",
          "required": false
        }
      ],
      "requiredFields": [
        "slug"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-forum-v2.Posts.PostResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Retrieves a single post by URL slug.",
        "description": [],
        "examples": [
          {
            "title": "getPostBySlug example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function getPostBySlug(slug, options) {",
              "  try {",
              "    const result = await posts.getPostBySlug(slug, options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "getPostBySlug example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedGetPostBySlug = elevate(posts.getPostBySlug);",
              "",
              "export const getPostBySlug = webMethod(",
              "  Permissions.Anyone,",
              "  async (slug, options) => {",
              "    try {",
              "      const result = await elevatedGetPostBySlug(slug, options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getPostBySlug",
      "isAdminMethod": true
    },
    {
      "name": "markPostRead",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the read post.",
          "required": true
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Marks post as read for identity who made a request.",
        "description": [],
        "examples": [
          {
            "title": "markPostRead example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function markPostRead(postId) {",
              "  try {",
              "    const result = await posts.markPostRead(postId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "markPostRead example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedMarkPostRead = elevate(posts.markPostRead);",
              "",
              "export const markPostRead = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId) => {",
              "    try {",
              "      const result = await elevatedMarkPostRead(postId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "markPostRead",
      "isAdminMethod": true
    },
    {
      "name": "markPostUnread",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the unread post.",
          "required": true
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Marks post as unread for identity who made a request.",
        "description": [],
        "examples": [
          {
            "title": "markPostUnread example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function markPostUnread(postId) {",
              "  try {",
              "    const result = await posts.markPostUnread(postId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "markPostUnread example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedMarkPostUnread = elevate(posts.markPostUnread);",
              "",
              "export const markPostUnread = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId) => {",
              "    try {",
              "      const result = await elevatedMarkPostUnread(postId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "markPostUnread",
      "isAdminMethod": true
    },
    {
      "name": "markPostsSeen",
      "params": [
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.MarkPostsSeenOptions"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Marks posts as seen for identity who made a request.",
        "description": [],
        "examples": [
          {
            "title": "markPostsSeen example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function markPostsSeen(options) {",
              "  try {",
              "    const result = await posts.markPostsSeen(options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "markPostsSeen example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedMarkPostsSeen = elevate(posts.markPostsSeen);",
              "",
              "export const markPostsSeen = webMethod(",
              "  Permissions.Anyone,",
              "  async (options) => {",
              "    try {",
              "      const result = await elevatedMarkPostsSeen(options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "markPostsSeen",
      "isAdminMethod": true
    },
    {
      "name": "pinPost",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.PinPostOptions"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Pins post",
        "description": [],
        "examples": [
          {
            "title": "pinPost example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function pinPost(postId, options) {",
              "  try {",
              "    const result = await posts.pinPost(postId, options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "pinPost example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedPinPost = elevate(posts.pinPost);",
              "",
              "export const pinPost = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId, options) => {",
              "    try {",
              "      const result = await elevatedPinPost(postId, options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "pinPost",
      "isAdminMethod": true
    },
    {
      "name": "queryPosts",
      "params": [
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.QueryPostsOptions"
            }
          ],
          "doc": "Options for sorting, filtering, paging, and specifying return fields.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-forum-v2.Posts.QueryPostsResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Returns a list of posts by query.",
        "description": [
          "Paging\n- limit: default - 10, min - 0, max - 100\n- offset: default - 0, min - 0\n\nFilterable fields:\n- id\n- categoryId\n- ownerId\n- title\n- contentText\n- bestAnswerCommentId\n- pinned\n- commentingEnabled\n- commentCount\n- likeCount\n- viewCount\n- createdDate\n- editedDate\n- lastActivityDate\n- slug\n\nSortable fields:\n- lastActivityDate\n- createdDate\n- commentCount\n- viewCount\n- likeCount\n- pinned"
        ],
        "examples": [
          {
            "title": "queryPosts example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function queryPosts(options) {",
              "  try {",
              "    const result = await posts.queryPosts(options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "queryPosts example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedQueryPosts = elevate(posts.queryPosts);",
              "",
              "export const queryPosts = webMethod(",
              "  Permissions.Anyone,",
              "  async (options) => {",
              "    try {",
              "      const result = await elevatedQueryPosts(options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "queryPosts",
      "isAdminMethod": true
    },
    {
      "name": "removeBestAnswer",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID",
          "required": true
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Removes \"best answer\" from a comment on a post.",
        "description": [],
        "examples": [
          {
            "title": "removeBestAnswer example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function removeBestAnswer(postId) {",
              "  try {",
              "    const result = await posts.removeBestAnswer(postId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "removeBestAnswer example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedRemoveBestAnswer = elevate(posts.removeBestAnswer);",
              "",
              "export const removeBestAnswer = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId) => {",
              "    try {",
              "      const result = await elevatedRemoveBestAnswer(postId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "removeBestAnswer",
      "isAdminMethod": true
    },
    {
      "name": "removeReaction",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID",
          "required": true
        },
        {
          "name": "reactionCode",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Code of reaction to remove.",
          "required": true
        }
      ],
      "requiredFields": [
        "postId",
        "reactionCode"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-forum-v2.Posts.RemoveReactionResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Removes reaction from post",
        "description": [],
        "examples": [
          {
            "title": "removeReaction example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function removeReaction(postId, reactionCode) {",
              "  try {",
              "    const result = await posts.removeReaction(postId, reactionCode);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "removeReaction example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedRemoveReaction = elevate(posts.removeReaction);",
              "",
              "export const removeReaction = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId, reactionCode) => {",
              "    try {",
              "      const result = await elevatedRemoveReaction(postId, reactionCode);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "removeReaction",
      "isAdminMethod": true
    },
    {
      "name": "reportPost",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.ReportPostOptions"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Report post",
        "description": [],
        "examples": [
          {
            "title": "reportPost example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function reportPost(postId, options) {",
              "  try {",
              "    const result = await posts.reportPost(postId, options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "reportPost example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedReportPost = elevate(posts.reportPost);",
              "",
              "export const reportPost = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId, options) => {",
              "    try {",
              "      const result = await elevatedReportPost(postId, options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "reportPost",
      "isAdminMethod": true
    },
    {
      "name": "setBestAnswer",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID.",
          "required": true
        },
        {
          "name": "commentId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the \"best answer\" comment on the post.",
          "required": true
        }
      ],
      "requiredFields": [
        "commentId",
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Sets the \"best answer\" comment on a post.",
        "description": [],
        "examples": [
          {
            "title": "setBestAnswer example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function setBestAnswer(postId, commentId) {",
              "  try {",
              "    const result = await posts.setBestAnswer(postId, commentId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "setBestAnswer example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedSetBestAnswer = elevate(posts.setBestAnswer);",
              "",
              "export const setBestAnswer = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId, commentId) => {",
              "    try {",
              "      const result = await elevatedSetBestAnswer(postId, commentId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "setBestAnswer",
      "isAdminMethod": true
    },
    {
      "name": "unpinPost",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID",
          "required": true
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Unpins post",
        "description": [],
        "examples": [
          {
            "title": "unpinPost example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function unpinPost(postId) {",
              "  try {",
              "    const result = await posts.unpinPost(postId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "unpinPost example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedUnpinPost = elevate(posts.unpinPost);",
              "",
              "export const unpinPost = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId) => {",
              "    try {",
              "      const result = await elevatedUnpinPost(postId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "unpinPost",
      "isAdminMethod": true
    },
    {
      "name": "updatePost",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the post to update.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.UpdatePostOptions"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-forum-v2.Posts.Post"
                }
              ]
            }
          }
        ],
        "doc": "Updated post.\n"
      },
      "docs": {
        "summary": "Updates post fields according to `fieldMask`.",
        "description": [],
        "examples": [
          {
            "title": "updatePost example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function updatePost(postId, options) {",
              "  try {",
              "    const result = await posts.updatePost(postId, options);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "updatePost example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedUpdatePost = elevate(posts.updatePost);",
              "",
              "export const updatePost = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId, options) => {",
              "    try {",
              "      const result = await elevatedUpdatePost(postId, options);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "updatePost",
      "isAdminMethod": true
    },
    {
      "name": "viewPost",
      "params": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the read post.",
          "required": true
        }
      ],
      "requiredFields": [
        "postId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Increments postViewCount of the post.",
        "description": [],
        "examples": [
          {
            "title": "viewPost example for dashboard page code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "",
              "async function viewPost(postId) {",
              "  try {",
              "    const result = await posts.viewPost(postId);",
              "    return result;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              ""
            ]
          },
          {
            "title": "viewPost example for exporting from backend code",
            "body": [
              "import { posts } from 'wix-forum.v2';",
              "import { webMethod, Permissions } from 'wix-web-module';",
              "import { elevate } from 'wix-auth';",
              "",
              "const elevatedViewPost = elevate(posts.viewPost);",
              "",
              "export const viewPost = webMethod(",
              "  Permissions.Anyone,",
              "  async (postId) => {",
              "    try {",
              "      const result = await elevatedViewPost(postId);",
              "      return result;",
              "    } catch (error) {",
              "      console.error(error);",
              "      // Handle the error",
              "    }",
              "  }",
              ");",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "viewPost",
      "isAdminMethod": true
    }
  ],
  "messages": [
    {
      "name": "ActionEvent",
      "members": [
        {
          "name": "bodyAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "AddReactionRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID"
        },
        {
          "name": "reactionCode",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Code of reaction to add."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "AddReactionResponse",
      "members": [
        {
          "name": "reactionCount",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of comment reactions."
        },
        {
          "name": "reactionIdentities",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-forum-v2.Posts.ReactionIdentity"
                  }
                ]
              }
            }
          ],
          "doc": "List of reacted identities grouped by reaction code."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Closed",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the closed post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreatePostOptions",
      "members": [
        {
          "name": "post",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.Post"
            }
          ],
          "doc": "New post to create."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreatePostRequest",
      "members": [
        {
          "name": "post",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.Post"
            }
          ],
          "doc": "New post to create."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreatePostResponse",
      "members": [
        {
          "name": "post",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.Post"
            }
          ],
          "doc": "Created post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeletePostRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the post to delete."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeletePostResponse",
      "members": [
        {
          "name": "post",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.Post"
            }
          ],
          "doc": "Deleted post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEvent",
      "members": [
        {
          "name": "_id",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Unique event ID.\nAllows clients to ignore duplicate webhooks."
        },
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "entityEventSequence",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A sequence number defining the order of updates to the underlying entity.\nFor example, given that some entity was updated at 16:00 and than again at 16:01,\nit is guaranteed that the sequence number of the second update is strictly higher than the first.\nAs the consumer, you can use this value to ensure that you handle messages in the correct order.\nTo do so, you will need to persist this number on your end, and compare the sequence number from the\nmessage against the one you have stored. Given that the stored number is higher, you should ignore the message."
        },
        {
          "name": "entityFqdn",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Assumes actions are also always typed to an entity_type\nExample: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction"
        },
        {
          "name": "entityId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the entity associated with the event."
        },
        {
          "name": "eventTime",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event timestamp."
        },
        {
          "name": "originatedFrom",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "If present, indicates the action that triggered the event."
        },
        {
          "name": "slug",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\nThis is although the created/updated/deleted notion is duplication of the oneof types\nExample: created/updated/deleted/started/completed/email_opened"
        },
        {
          "name": "triggeredByAnonymizeRequest",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the event was triggered as a result of a privacy regulation application\n(for example, GDPR)."
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfDomainEventBodyOneOf",
            "members": [
              "actionEvent",
              "createdEvent",
              "deletedEvent",
              "updatedEvent"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEventBodyOneOf",
      "members": [
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityCreatedEvent",
      "members": [
        {
          "name": "entityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityDeletedEvent",
      "members": [
        {
          "name": "deletedEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Entity that was deleted"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityUpdatedEvent",
      "members": [
        {
          "name": "currentEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\nThis means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\nWe don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetPostBySlugOptions",
      "members": [
        {
          "name": "extraFields",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Array of extra post fields to be included in the response."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetPostOptions",
      "members": [
        {
          "name": "extraFields",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Array of extra post fields to be included in the response."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "IdentificationData",
      "members": [
        {
          "name": "anonymousVisitorId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a site visitor that has not logged in to the site."
        },
        {
          "name": "appId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of an app."
        },
        {
          "name": "identityType",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Supported values:\n- `'ANONYMOUS_VISITOR'`\n- `'APP'`\n- `'MEMBER'`\n- `'UNKNOWN'`\n- `'WIX_USER'`"
        },
        {
          "name": "memberId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a site visitor that has logged in to the site."
        },
        {
          "name": "wixUserId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a Wix user (site owner, contributor, etc.)."
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfIdentificationDataIdOneOf",
            "members": [
              "anonymousVisitorId",
              "appId",
              "memberId",
              "wixUserId"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "IdentificationDataIdOneOf",
      "members": [
        {
          "name": "anonymousVisitorId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a site visitor that has not logged in to the site."
        },
        {
          "name": "appId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of an app."
        },
        {
          "name": "memberId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a site visitor that has logged in to the site."
        },
        {
          "name": "wixUserId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of a Wix user (site owner, contributor, etc.)."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Identity",
      "members": [
        {
          "name": "identityId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Identity ID."
        },
        {
          "name": "identityType",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Reacted identity type."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Liked",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the liked post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkPostReadRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the read post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkPostReadResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkPostUnreadRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the unread post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkPostUnreadResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkPostsSeenOptions",
      "members": [
        {
          "name": "postsIds",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "IDs of the seen posts."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkPostsSeenRequest",
      "members": [
        {
          "name": "postsIds",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "IDs of the seen posts."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkPostsSeenResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MessageEnvelope",
      "members": [
        {
          "name": "data",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Stringify payload."
        },
        {
          "name": "eventType",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event type."
        },
        {
          "name": "identity",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.IdentificationData"
            }
          ],
          "doc": "The identification type and identity data."
        },
        {
          "name": "instanceId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "App instance ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Moved",
      "members": [
        {
          "name": "currentCategoryId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "New current category ID."
        },
        {
          "name": "oldCategoryId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Old category ID."
        },
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the moved post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Opened",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the opened post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PinPostOptions",
      "members": [
        {
          "name": "expiresInMinutes",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "The amount of minutes after which the pin will be removed (unpinned)"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PinPostRequest",
      "members": [
        {
          "name": "expiresInMinutes",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "The amount of minutes after which the pin will be removed (unpinned)"
        },
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PinPostResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Pinned",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the pinned post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Post",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date post was created."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID."
        },
        {
          "name": "_updatedDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date post was updated."
        },
        {
          "name": "categoryId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Category ID the post is listed under."
        },
        {
          "name": "closed",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether post is closed and commenting is disabled."
        },
        {
          "name": "commentCount",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of post comments."
        },
        {
          "name": "commentInteraction",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Defines what interactions may be applied on the comment under the post."
        },
        {
          "name": "contentText",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The post content in plain text."
        },
        {
          "name": "images",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Images from post content."
        },
        {
          "name": "lastActivityDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date of latest activity on this post. For example, date the latest comment was added to post."
        },
        {
          "name": "likeCount",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of post likes."
        },
        {
          "name": "markedComments",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "IDs of the marked comments for this post (selected by forum admin or post owner)."
        },
        {
          "name": "ownerId",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post owner's member ID."
        },
        {
          "name": "pinned",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the post is pinned. Places the post at the top of the post list."
        },
        {
          "name": "reactionIdentities",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-forum-v2.Posts.ReactionIdentity"
                  }
                ]
              }
            }
          ],
          "doc": "List of reaction identities grouped by reaction code."
        },
        {
          "name": "recentActivity",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.RecentActivity"
            }
          ],
          "doc": "Recent activity of post. For example, a comment added to a post."
        },
        {
          "name": "slug",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post slug."
        },
        {
          "name": "title",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post title."
        },
        {
          "name": "url",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post URL."
        },
        {
          "name": "videos",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Videos from post content."
        },
        {
          "name": "viewCount",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of post views."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PostRequest",
      "members": [
        {
          "name": "extraFields",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Array of extra post fields to be added in the response."
        },
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PostResponse",
      "members": [
        {
          "name": "post",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.Post"
            }
          ],
          "doc": "Post for the provided post ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PostSlugRequest",
      "members": [
        {
          "name": "extraFields",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Array of extra post fields to be added in the response."
        },
        {
          "name": "slug",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "URL slug."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PostsPaging",
      "members": [
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "The number of items to load."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to skip in the current sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PostsSort",
      "members": [
        {
          "name": "fieldName",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Records can be sorted by:\nlastActivityDate\ncreatedDate\ncommentCount\nviewCount\nlikeCount\nisPinned"
        },
        {
          "name": "order",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Records can be sorted in ascending (default) or descending order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryPostsOptions",
      "members": [
        {
          "name": "extraFields",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Array of extra post fields to be included in the response."
        },
        {
          "name": "filter",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Filter object (e.g., { $and: [{ ownerId: { eq: 'ownerId' } }, { likeCount: { $gt: 0 }] } )."
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.PostsPaging"
            }
          ],
          "doc": "Paging object (e.g., { limit: 10, offset: 100 } )."
        },
        {
          "name": "sort",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-forum-v2.Posts.PostsSort"
                  }
                ]
              }
            }
          ],
          "doc": "Array of sort objects (e.g.,  [{ fieldName: createdDate, order: Order.ASC }] )."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryPostsRequest",
      "members": [
        {
          "name": "extraFields",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Array of extra post fields to be added in the response."
        },
        {
          "name": "filter",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Filter object (e.g., { $and: [{ ownerId: { eq: 'ownerId' } }, { likeCount: { $gt: 0 }] } )."
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.PostsPaging"
            }
          ],
          "doc": "Paging object (e.g., { limit: 10, offset: 100 } )."
        },
        {
          "name": "sort",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-forum-v2.Posts.PostsSort"
                  }
                ]
              }
            }
          ],
          "doc": "Array of sort objects (e.g.,  [{ fieldName: createdDate, order: Order.ASC }] )."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryPostsResponse",
      "members": [
        {
          "name": "metaData",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.QueryPostsResponseMetaData"
            }
          ],
          "doc": "Pagination."
        },
        {
          "name": "posts",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-forum-v2.Posts.Post"
                  }
                ]
              }
            }
          ],
          "doc": "List of posts."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryPostsResponseMetaData",
      "members": [
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of records returned."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Offset of records."
        },
        {
          "name": "total",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of records that match the filters."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Reacted",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        },
        {
          "name": "reactionCode",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReactionCodeCount",
      "members": [
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of reaction."
        },
        {
          "name": "reactionCode",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Reaction code."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReactionIdentity",
      "members": [
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of reacted identities count."
        },
        {
          "name": "identities",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-forum-v2.Posts.Identity"
                  }
                ]
              }
            }
          ],
          "doc": "Reacted identities."
        },
        {
          "name": "reactionCode",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Reaction code."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "RecentActivity",
      "members": [
        {
          "name": "activityDate",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Date activity was created."
        },
        {
          "name": "entityId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of recent activity entity."
        },
        {
          "name": "memberId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Site member ID."
        },
        {
          "name": "type",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Type of entity."
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfRecentActivityInitiatorOneOf",
            "members": [
              "memberId"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "RecentActivityInitiatorOneOf",
      "members": [
        {
          "name": "memberId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Site member ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "RemoveBestAnswerRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "RemoveBestAnswerResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "RemoveReactionRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID"
        },
        {
          "name": "reactionCode",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Code of reaction to remove."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "RemoveReactionResponse",
      "members": [
        {
          "name": "reactionCount",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of comment reactions."
        },
        {
          "name": "reactionIdentities",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-forum-v2.Posts.ReactionIdentity"
                  }
                ]
              }
            }
          ],
          "doc": "List of reacted identities grouped by reaction code."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReportPostOptions",
      "members": [
        {
          "name": "reportType",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Type of report."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReportPostRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID"
        },
        {
          "name": "reportType",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Type of report."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReportPostResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Reported",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the reported post."
        },
        {
          "name": "reportType",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Type of report."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "SetBestAnswerRequest",
      "members": [
        {
          "name": "commentId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the \"best answer\" comment on the post."
        },
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "SetBestAnswerResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Unliked",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the unliked post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UnpinPostRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Post ID"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UnpinPostResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Unpinned",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the unpinned post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Unreacted",
      "members": [
        {
          "name": "postId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        },
        {
          "name": "reactionCode",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePostOptions",
      "members": [
        {
          "name": "post",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.Post"
            }
          ],
          "doc": "Post data with partial data to update."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePostRequest",
      "members": [
        {
          "name": "post",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.Post"
            }
          ],
          "doc": "Post data with partial data to update."
        },
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the post to update."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePostResponse",
      "members": [
        {
          "name": "post",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-forum-v2.Posts.Post"
            }
          ],
          "doc": "Updated post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "VideoResolution",
      "members": [
        {
          "name": "format",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Video format for example, mp4, hls."
        },
        {
          "name": "height",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Video height."
        },
        {
          "name": "url",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Video URL."
        },
        {
          "name": "width",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Video width."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ViewPostRequest",
      "members": [
        {
          "name": "postId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the read post."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ViewPostResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    }
  ]
}
