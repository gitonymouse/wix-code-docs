{ "name": "form-submission",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "submission-index.js" },
  "docs":
    { "summary": "The WixForms Submissions SPI.",
      "description":
        [ "The Form Submission SPI [custom extension](https://support.wix.com/en/article/velo-custom-app-extensions-using-spis) allows site owners and collaborators to validate a site visitor's filled form. For example, you can validate whether a correct email is entered into the field.",
          "Site owners and collaborators can either write their own custom validation logic, or integrate with a 3rd-party validations provider.",
          "",
          "Wix Forms calls [`validateSubmission()`](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/getvalidationviolations) to validate a site visitor's filled form.",
          "The custom validation extension code validates the request, and returns any validation violation data in a site visitor's form (using the structure provided by Wix Forms).",
          "If there aren't any validation violations, the function should return an object containing an empty array. Site visitors can see validation violations in their forms. ",
          "",
          "## Before you begin",
          "",
          "- The Form Submission SPI is only available in Wix Studio and Editor X.",
          "",
          "### To add a custom extension",
          "1. [Add the extension to your site](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/integrations/custom-extensions-spis/custom-app-extensions-using-sp-is#step-1-create-a-new-extension-on-your-wix-site).",
          "2. Update the [`getConfig()`](https://www.wix.com/velo/reference/spis/wix-forms/form-submission/getconfig) function in the **-config.js** file that is added to your site during step 1.",
          "3. Update the [`validateSubmission()`](https://www.wix.com/velo/reference/spis/wix-forms/form-submission/validateSubmission) function in the **.js** file that is added to your site during step 1.",
          "",
          "## Use Cases",
          "",
          "With the Validations SPI you can define the validations for a site form that fit your site's needs. Possible validations include:",
          " + Field validations: Check if the email address is in the correct format or that the name contains only alphabetic characters.",
          " + Prevent submission of invalid data: Disable the submit button until all fields are correctly filled out.",
          " + Real-time feedback: Highlight the invalid fields.",
          " + Restrict purchases to site members only.",
          " + Prevent duplicate submissions: Check for duplicate submissions based on certain criteria and prevent site visitors from submitting the same form multiple times.",
          "",
          "## Terminology",
          "",
          "  | Term | Definition |",
          "  | --- | --- |",
          "  | Submission |Data received when a site visitor submits a form. | ",
          "  | Validation |Process that makes sure the information that the site visitor put into a form is correct and meets certain rules. |  ",
          "  | Target |Online interface that allows site visitors to input and submit data. |" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "getConfig",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "ecom-validations.ValidationsConfigResponse" ] },
            "doc": "Fulfilled - The configuration settings." },
        "locations":
          [ { "lineno": 1,
              "filename": "submission.js" } ],
        "docs":
          { "summary": "Retrieves the configuration of your validations extension.",
            "description":
              [ "Set your validations configuration in the `return` of the `getConfig()` function. Wix calls this function when you publish your site. ",
                "Changes to the configuration don't take effect until you publish your site.",
                "",
                "By default, the Validations SPI only validates a site visitor's checkout. To also validate a site visitor's cart, ",
                "set `validateInCart` to `true`.",
                "",
                "### Where to find `getConfig()`",
                "When you [add the Validations custom extension](https://dev.wix.com/docs/develop-websites/articles/code-tutorials/wix-e-commerce-stores/tutorial-validations-custom-extension#step-1-create-a-new-validation-extension), ",
                "a folder is automatically added to your site. Use the `<my-extension-name>-config.js` file in the folder to set the default configuration for your ",
                "implementation of the custom extension.",
                "",
                "For more information on setting your configuration, see [Tutorial: Validations Custom Extension](https://dev.wix.com/docs/develop-websites/articles/code-tutorials/wix-e-commerce-stores/tutorial-validations-custom-extension#minimum-configjs)." ],
            "links": [],
            "examples":
              [ { "title": "Example of a configuration file",
                  "body":
                    [ "// Place this code in the <my-extension-name>-config.js file",
                      "// in the 'ecom-validations' folder of the",
                      "// Custom Extensions section on your site.",
                      "",
                      "export function getConfig() {",
                      "  return {",
                      "    validateInCart: true",
                      "  };",
                      "};" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "customLabels":
              [ { "id": "maturity-beta" } ] } },
      { "name": "validateSubmission",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "ecom-validations.Options",
              "doc": "Validation options." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "ecom-validations.GetValidationViolationsResponse" ] },
            "doc": "Fulfilled - Validation violations." },
        "locations":
          [ { "lineno": 31,
              "filename": "submission.js" } ],
        "docs":
          { "summary": "Retrieves any validation violations in a site visitor's cart or checkout.",
            "description":
              [ "The `getValidationViolations` function validates a site visitor's cart or checkout and returns any validation violations. Site visitors can see the validation violations in their cart and checkout pages. If there aren't any validation violations, the endpoint returns an object containing an empty list.",
                "",
                "The function is automatically called by Wix eCommerce when certain actions are performed on a cart or checkout. For example, when an item is added to a cart, or when a coupon is added to a checkout. ",
                "",
                ">**Note:** By default, the Validations SPI only validates a site visitor's checkout. If you want to also validate a site visitor's cart, set the `validateInCart` parameter to `true` in the custom extension's config file." ],
            "links": [],
            "examples":
              [ { "title": "Get Validation Violations",
                  "body":
                    [ "const goldRingItemId = \"37e5db61-d37d-442d-1bf5-ae755f82020b\";",
                      "",
                      "export const getValidationViolations = async (options, context) => {",
                      "  const lineItems = options.validationInfo.lineItems;",
                      "  let violations = [];",
                      "",
                      "  if (hasExcessiveGoldRingQuantity(lineItems)) {",
                      "    const source = options.sourceInfo.source;",
                      "    const severity = getSourceSeverity(source);",
                      "",
                      "    const target = {",
                      "      lineItem: {",
                      "        name: 'LINE_ITEM_DEFAULT',",
                      "        _id: findGoldRingLineItemId(lineItems)",
                      "      }",
                      "    };",
                      "",
                      "    const description = \"You can't purchase more than 5 gold rings.\";",
                      "",
                      "    const violation = createViolation(severity, target, description);",
                      "    violations.push(violation);",
                      "  }",
                      "",
                      "  return { violations };",
                      "};",
                      "",
                      "function getSourceSeverity(source) {",
                      "  if (source === 'CART') {",
                      "    return 'WARNING';",
                      "  } else {",
                      "    return 'ERROR';",
                      "  }",
                      "}",
                      "",
                      "function hasExcessiveGoldRingQuantity(lineItems) {",
                      "  for (const lineItem of lineItems) {",
                      "    if (lineItem.catalogReference.catalogItemId === goldRingItemId && lineItem.quantity > 5) {",
                      "      return true;",
                      "    }",
                      "  }",
                      "  return false;",
                      "}",
                      "",
                      "function findGoldRingLineItemId(lineItems) {",
                      "  for (const lineItem of lineItems) {",
                      "    if (lineItem.catalogReference.catalogItemId === goldRingItemId) {",
                      "      return lineItem._id;",
                      "    }",
                      "  }",
                      "  return undefined;",
                      "}",
                      "",
                      "function createViolation(severity, target, description) {",
                      "  return { severity, target, description };",
                      "}" ],
                  "extra":
                    { "description": "This example validates a cart and checkout. The quantity of gold rings is limited, and the site visitor isn't allowed to purchase more than 5." } } ],
            "extra":
              {  } },
        "extra":
          { "customLabels":
              [ { "id": "maturity-beta" } ] } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "customLabels":
        [ { "id": "maturity-beta" } ] } }