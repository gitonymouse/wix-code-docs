{
  "name": "GiftCardsQueryBuilder",
  "memberOf": "wix-rise-v2.GiftCard",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-rise.v2-gift_card.gift-card.gift-cards-query-builder",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "find",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-rise-v2.GiftCard.GiftCardsQueryResult"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Returns the query results.",
        "description": [
          "The `find()` function returns a Promise that resolves to the query results and metadata.",
          "The Promise is rejected if `find()` is called with insufficient permissions or if any of the previous functions used to refine the query are invalid."
        ],
        "examples": [
          {
            "title": "Run a query with no filters",
            "body": [
              "const query = giftCard.queryGiftCards.find();",
              ""
            ]
          },
          {
            "title": "Perform a `find` on a query",
            "body": [
              "import { giftCard } from 'wix-rise.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await giftCard.queryGiftCards().find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "find"
    },
    {
      "name": "limit",
      "params": [
        {
          "name": "limit",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to return, which is also the `pageSize` of the results object.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-rise-v2.GiftCard.GiftCardsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Limits the number of items the query returns.",
        "description": [
          "The `limit()` function defines the number of results a query returns in each page. Only one page of results is retrieved at a time.",
          "You can use the `next()` and `prev()` functions to navigate the pages of a query result."
        ],
        "examples": [
          {
            "title": "Add a `limit` to a query",
            "body": [
              "const query = giftCard.queryGiftCards.limit(10);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `limit`, and run it",
            "body": [
              "import { giftCard } from 'wix-rise.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await giftCard.queryGiftCards().limit(10).find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "limit"
    },
    {
      "name": "skip",
      "params": [
        {
          "name": "skip",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to skip in the query results before returning the results.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-rise-v2.GiftCard.GiftCardsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Sets the number of items to skip before returning query results.",
        "description": [
          "The `skip()` function defines the number of results to skip before returning new query results.",
          "For example, if you query a collection and 50 items match your query, but you set `skip()` to `10`, the first 10 items that match are ignored, and the 11th through 50th items are returned."
        ],
        "examples": [
          {
            "title": "Add a `skip` to a query",
            "body": [
              "const query = giftCard.queryGiftCards.skip(10);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `skip`, and run it",
            "body": [
              "import { giftCard } from 'wix-rise.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await giftCard.queryGiftCards().skip(10).find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "skip"
    }
  ],
  "messages": []
}
