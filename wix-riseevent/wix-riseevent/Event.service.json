{
  "name": "Event",
  "memberOf": "wix-riseevent",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-riseevent-event",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "createEvent",
      "params": [
        {
          "name": "event",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Event"
            }
          ],
          "doc": "Event to be created",
          "required": true
        }
      ],
      "requiredFields": [
        "event",
        "event.amount",
        "event.type",
        "event.walletId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-riseevent.Event.Event"
                }
              ]
            }
          }
        ],
        "doc": "The created Event\n"
      },
      "docs": {
        "summary": "Creates a new Event",
        "description": [],
        "examples": [
          {
            "title": "createEvent example",
            "body": [
              "import { event } from 'wix-riseevent';",
              "  ",
              " async function createEvent(event) {",
              "   try {",
              "     const result = await event.createEvent(event);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "createEvent"
    },
    {
      "name": "deleteEvent",
      "params": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the Event to delete",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.DeleteEventOptions"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [
        "eventId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Delete an Event, only available for events which haven't started",
        "description": [],
        "examples": [
          {
            "title": "deleteEvent example",
            "body": [
              "import { event } from 'wix-riseevent';",
              "  ",
              " async function deleteEvent(eventId, options) {",
              "   try {",
              "     const result = await event.deleteEvent(eventId, options);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "deleteEvent"
    },
    {
      "name": "disableEvent",
      "params": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the Event to delete",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.DisableEventOptions"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [
        "eventId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-riseevent.Event.DisableEventResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Expire an Event immediately and deducting the remaining balance from the gift card",
        "description": [],
        "examples": [
          {
            "title": "disableEvent example",
            "body": [
              "import { event } from 'wix-riseevent';",
              "  ",
              " async function disableEvent(eventId, options) {",
              "   try {",
              "     const result = await event.disableEvent(eventId, options);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "disableEvent"
    },
    {
      "name": "getEvent",
      "params": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the Event to retrieve",
          "required": true
        }
      ],
      "requiredFields": [
        "eventId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-riseevent.Event.Event"
                }
              ]
            }
          }
        ],
        "doc": "The retrieved Event\n"
      },
      "docs": {
        "summary": "Get an Event by ID",
        "description": [],
        "examples": [
          {
            "title": "getEvent example",
            "body": [
              "import { event } from 'wix-riseevent';",
              "  ",
              " async function getEvent(eventId) {",
              "   try {",
              "     const result = await event.getEvent(eventId);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getEvent"
    },
    {
      "name": "queryEvent",
      "params": [
        {
          "name": "query",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.QueryV2"
            }
          ],
          "doc": "WQL expression",
          "required": true
        }
      ],
      "requiredFields": [
        "query"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-riseevent.Event.QueryEventResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Query Events using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)",
        "description": [],
        "examples": [
          {
            "title": "queryEvent example",
            "body": [
              "import { event } from 'wix-riseevent';",
              "  ",
              " async function queryEvent(query) {",
              "   try {",
              "     const result = await event.queryEvent(query);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "queryEvent"
    },
    {
      "name": "queryEventBalances",
      "params": [
        {
          "name": "query",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.QueryV2"
            }
          ],
          "doc": "WQL expression",
          "required": true
        }
      ],
      "requiredFields": [
        "query"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-riseevent.Event.QueryEventBalancesResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Query Events using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)\nResults will be enriched with calculated balances",
        "description": [],
        "examples": [
          {
            "title": "queryEventBalances example",
            "body": [
              "import { event } from 'wix-riseevent';",
              "  ",
              " async function queryEventBalances(query) {",
              "   try {",
              "     const result = await event.queryEventBalances(query);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "queryEventBalances"
    },
    {
      "name": "updateEvent",
      "params": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID",
          "required": true
        },
        {
          "name": "event",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.UpdateEvent"
            }
          ],
          "doc": "",
          "required": true
        }
      ],
      "requiredFields": [
        "_id",
        "event",
        "event.revision"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-riseevent.Event.Event"
                }
              ]
            }
          }
        ],
        "doc": "The updated Event\n"
      },
      "docs": {
        "summary": "Update an Event, supports partial update\nPass the latest `revision` for a successful update",
        "description": [],
        "examples": [
          {
            "title": "updateEvent example",
            "body": [
              "import { event } from 'wix-riseevent';",
              "  ",
              " async function updateEvent(id, event, options) {",
              "   try {",
              "     const result = await event.updateEvent(id, event, options);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "updateEvent"
    }
  ],
  "messages": [
    {
      "name": "CreateEventRequest",
      "members": [
        {
          "name": "event",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Event"
            }
          ],
          "doc": "Event to be created"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateEventResponse",
      "members": [
        {
          "name": "event",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Event"
            }
          ],
          "doc": "The created Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorPaging",
      "members": [
        {
          "name": "cursor",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Pointer to the next or previous page in the list of results.\n\nYou can get the relevant cursor token\nfrom the `pagingMetadata` object in the previous call's response.\nNot relevant for the first request.\n"
        },
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to load."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteEventOptions",
      "members": [
        {
          "name": "revision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The revision of the Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteEventRequest",
      "members": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the Event to delete"
        },
        {
          "name": "revision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The revision of the Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteEventResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DisableEventOptions",
      "members": [
        {
          "name": "revision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The revision of the Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DisableEventRequest",
      "members": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the Event to delete"
        },
        {
          "name": "revision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The revision of the Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DisableEventResponse",
      "members": [
        {
          "name": "event",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Event"
            }
          ],
          "doc": "The expired Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Empty",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Event",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time this Event was created"
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID"
        },
        {
          "name": "_updatedDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time this Event was last updated"
        },
        {
          "name": "amount",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The amount to be added to the customer"
        },
        {
          "name": "disabledAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time when the event was manually disabled"
        },
        {
          "name": "expiresAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time when the unused balance will be deducted from the account"
        },
        {
          "name": "note",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Free text comment regarding the Event context"
        },
        {
          "name": "revision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Represents the current state of an item. Each time the item is modified, its `revision` changes. For an update operation to succeed, you MUST pass the latest revision"
        },
        {
          "name": "startDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time when the event's amount will be added to the account"
        },
        {
          "name": "type",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Indicates the kind of the specific event"
        },
        {
          "name": "walletId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Wallet ID"
        }
      ],
      "docs": {
        "description": [
          "Event is the main entity of EventService"
        ]
      }
    },
    {
      "name": "EventCreationDisabledAtDateSetDetails",
      "members": [
        {
          "name": "disabledAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time when the event was disabled."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EventCreationExpirationDateInThePastDetails",
      "members": [
        {
          "name": "currentDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The date when the event was tried to be created."
        },
        {
          "name": "expiresAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The date when the event expires."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EventCreationStartLaterThanExpirationDetails",
      "members": [
        {
          "name": "expiresAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The date when the event expires."
        },
        {
          "name": "startDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The start date of the event."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EventUpdateExpirationDateInThePastDetails",
      "members": [
        {
          "name": "currentDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The date when the event was tried to be updated."
        },
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID."
        },
        {
          "name": "newExpiresAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The date when the event expires."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EventUpdateStartDateInThePastDetails",
      "members": [
        {
          "name": "currentDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The date when the event was tried to be updated."
        },
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID."
        },
        {
          "name": "newStartDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The date when the event expires."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EventUpdateStartLaterThanExpirationDetails",
      "members": [
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID."
        },
        {
          "name": "expiresAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The date when the event expires."
        },
        {
          "name": "startDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The start date of the event."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EventWithBalance",
      "members": [
        {
          "name": "balance",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event balance"
        },
        {
          "name": "event",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Event"
            }
          ],
          "doc": "Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetEventRequest",
      "members": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the Event to retrieve"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetEventResponse",
      "members": [
        {
          "name": "event",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Event"
            }
          ],
          "doc": "The retrieved Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "InvalidEventDetails",
      "members": [
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Paging",
      "members": [
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to load."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to skip in the current sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryEventBalancesRequest",
      "members": [
        {
          "name": "query",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.QueryV2"
            }
          ],
          "doc": "WQL expression"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryEventBalancesResponse",
      "members": [
        {
          "name": "events",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-riseevent.Event.EventWithBalance"
                  }
                ]
              }
            }
          ],
          "doc": "The retrieved Events with their balance"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryEventRequest",
      "members": [
        {
          "name": "query",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.QueryV2"
            }
          ],
          "doc": "WQL expression"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryEventResponse",
      "members": [
        {
          "name": "events",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-riseevent.Event.Event"
                  }
                ]
              }
            }
          ],
          "doc": "The retrieved Events"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryV2",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.CursorPaging"
            }
          ],
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`."
        },
        {
          "name": "fields",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned."
        },
        {
          "name": "fieldsets",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned."
        },
        {
          "name": "filter",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Filter object in the following format:\n`\"filter\" : {\n\"fieldName1\": \"value1\",\n\"fieldName2\":{\"$operator\":\"value2\"}\n}`\nExample of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`"
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Paging"
            }
          ],
          "doc": "Paging options to limit and skip the number of items."
        },
        {
          "name": "sort",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-riseevent.Event.Sorting"
                  }
                ]
              }
            }
          ],
          "doc": "Sort object in the following format:\n`[{\"fieldName\":\"sortField1\",\"order\":\"ASC\"},{\"fieldName\":\"sortField2\",\"order\":\"DESC\"}]`"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfQueryV2PagingMethodOneOf",
            "members": [
              "cursorPaging",
              "paging"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryV2PagingMethodOneOf",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.CursorPaging"
            }
          ],
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`."
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Paging"
            }
          ],
          "doc": "Paging options to limit and skip the number of items."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Sorting",
      "members": [
        {
          "name": "fieldName",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Name of the field to sort by."
        },
        {
          "name": "order",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Task",
      "members": [
        {
          "name": "_id",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.TaskId"
            }
          ],
          "doc": "Task id"
        },
        {
          "name": "cron",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A recurrent trigger defined by a specified cron expression.\n\nCron expression is a string of five space-separated sub-expressions\n\n* * * * *\n| | | | |\nminute of hour | | | day of week\nhour of day | month of year\nday of month\n\nField            Accepted values\n-----            ---------------\nminute of hour   0..59 / * ,\nhour of day      0..23 / * ,\nday of month     1..31 / * , W L\nmonth of year    1..12 / * ,\nday of week      0..7 MON..SUN / * W L #\n\nComa separates multiple values:\n0,20,40 * * * * => on 0th, 20th and 40th minute\nSlash selects every Nth value:\n* /20 * * * * => equivalent to 0,20,40\n5/20 * * * * => on 5th, 25th and 45th minute\nW selects working days\n0 2 * * W =>  2am on Mon..Fri\nL selects the last day of ...\n0 0 L * *    => last day of each month\n0 0 LW * *   => last working day of each month\n0 0 * * FRIL => midnight of the last Friday of the month\nHash selects Nth day of week\n0 0 * * Mon#1 => midnight of the first Monday of the month\n\nFollowing aliases are supported: @hourly, @daily, @weekly, @monthly\n\nThe first execution time will be evaluated based on the client invocation time (approximately the moment the\nclient call returns).\nAll executions will be evaluated in UTC.\n\nExample:\n00:19:59 - client schedules a task with cron = 0/20 * * * * (every 20-th minute of the hour)\n00:20:02 - task reaches Time Capsule database\n00:21:00 - task is executed by Time Capsule, the client is triggered with a ~1 minute delay\n00:40:00 - task is executed by Time Capsule according to the schedule with no delay\n"
        },
        {
          "name": "oneTime",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "A trigger which will fire once at a specified timestamp"
        },
        {
          "name": "payload",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Task payload"
        },
        {
          "name": "scheduledFor",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "The time when this task is scheduled to trigger. For reoccurring tasks, this will be hold the next time this task will run and will be updated after every run"
        },
        {
          "name": "topic",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A Greyhound topic to which the task will be produced when triggered"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfTaskTriggerOneOf",
            "members": [
              "cron",
              "oneTime"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "TaskId",
      "members": [
        {
          "name": "key",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A free-form string that together with `namespace` and `task_type` uniquely identifies a task.\nWhen there is an entity involved, setting this to be equal to the ID of an entity related to the task is a good option."
        },
        {
          "name": "namespace",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A unique identifier of an application or a source that define the task. In most cases this would be the appDefId"
        },
        {
          "name": "taskType",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A free-form string distinguishing different families of tasks within a namespace.\nFor example: \"send-promo-email\", \"ClearTrashBin\", \"premium expiration reminder\""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "TaskTriggerOneOf",
      "members": [
        {
          "name": "cron",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A recurrent trigger defined by a specified cron expression.\n\nCron expression is a string of five space-separated sub-expressions\n\n* * * * *\n| | | | |\nminute of hour | | | day of week\nhour of day | month of year\nday of month\n\nField            Accepted values\n-----            ---------------\nminute of hour   0..59 / * ,\nhour of day      0..23 / * ,\nday of month     1..31 / * , W L\nmonth of year    1..12 / * ,\nday of week      0..7 MON..SUN / * W L #\n\nComa separates multiple values:\n0,20,40 * * * * => on 0th, 20th and 40th minute\nSlash selects every Nth value:\n* /20 * * * * => equivalent to 0,20,40\n5/20 * * * * => on 5th, 25th and 45th minute\nW selects working days\n0 2 * * W =>  2am on Mon..Fri\nL selects the last day of ...\n0 0 L * *    => last day of each month\n0 0 LW * *   => last working day of each month\n0 0 * * FRIL => midnight of the last Friday of the month\nHash selects Nth day of week\n0 0 * * Mon#1 => midnight of the first Monday of the month\n\nFollowing aliases are supported: @hourly, @daily, @weekly, @monthly\n\nThe first execution time will be evaluated based on the client invocation time (approximately the moment the\nclient call returns).\nAll executions will be evaluated in UTC.\n\nExample:\n00:19:59 - client schedules a task with cron = 0/20 * * * * (every 20-th minute of the hour)\n00:20:02 - task reaches Time Capsule database\n00:21:00 - task is executed by Time Capsule, the client is triggered with a ~1 minute delay\n00:40:00 - task is executed by Time Capsule according to the schedule with no delay\n"
        },
        {
          "name": "oneTime",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "A trigger which will fire once at a specified timestamp"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateEvent",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time this Event was created"
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID"
        },
        {
          "name": "_updatedDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time this Event was last updated"
        },
        {
          "name": "amount",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The amount to be added to the customer"
        },
        {
          "name": "disabledAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time when the event was manually disabled"
        },
        {
          "name": "expiresAt",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time when the unused balance will be deducted from the account"
        },
        {
          "name": "note",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Free text comment regarding the Event context"
        },
        {
          "name": "revision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Represents the current state of an item. Each time the item is modified, its `revision` changes. For an update operation to succeed, you MUST pass the latest revision"
        },
        {
          "name": "startDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Represents the time when the event's amount will be added to the account"
        },
        {
          "name": "type",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Indicates the kind of the specific event"
        },
        {
          "name": "walletId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Wallet ID"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateEventOptions",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateEventRequest",
      "members": [
        {
          "name": "event",
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Event"
            }
          ],
          "doc": "Event to be updated, may be partial"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateEventResponse",
      "members": [
        {
          "name": "event",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-riseevent.Event.Event"
            }
          ],
          "doc": "The updated Event"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    }
  ]
}
